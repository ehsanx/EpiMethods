## Baron and Kenny {.unnumbered}

```{r setup, warning=FALSE, message=FALSE, cache=TRUE}
# Load required packages
require(simcausal)
```

Big data: **What if we had 1,000,000 (1 million) observations?**

### Continuous outcome, continuous mediator

-   True treatment effect = 1.3

#### Data generating process

```{r m11, cache= TRUE}
require(simcausal)
D <- DAG.empty()
D <- D + 
    node("A", distr = "rnorm", mean = 0, sd = 1) + 
    node("M", distr = "rnorm", mean = 0.5 * A, sd = 1) + 
    node("Y", distr = "rnorm", mean = 0.5 * M + 1.3 * A, sd = .1)
Dset <- set.DAG(D)
```

#### Generate DAG

```{r m12, cache= TRUE}
plotDAG(Dset, xjitter = 0.1, yjitter = .9,
        edge_attrs = list(width = 0.5, arrow.width = 0.4, arrow.size = 0.7),
        vertex_attrs = list(size = 12, label.cex = 0.8))

```

#### Generate Data

```{r m13, cache= TRUE}
Obs.Data <- sim(DAG = Dset, n = 1000000, rndseed = 123)
head(Obs.Data)
```

#### Estimate effect (beta-coef)

```{r m14, cache= TRUE}
fit <- glm(Y ~ A, family="gaussian", data=Obs.Data)
round(coef(fit),2)
fit.am <- glm(Y ~ A + M, family="gaussian", data=Obs.Data)
round(coef(fit.am),2)
fit.m <- glm(M ~ A, family="gaussian", data=Obs.Data)
round(coef(fit.m),2)
```

```{r m15, cache= TRUE}
# from 1st model
a.coef <- round(coef(fit),2)[2]
a.coef
# from 2nd (adjusted) model
am.coef <- round(coef(fit.am),2)[2]
am.coef
m.coef <- round(coef(fit.am),2)[3]
m.coef
# from 3rd (mediator) model
ma.coef <- round(coef(fit.m),2)[2]
ma.coef
```

#### Baron and Kenny (1986) approach 1

```{r m16, cache= TRUE}
# Direct effect
am.coef
# Total effect
a.coef
# Indirect effect
a.coef - am.coef
```

#### Baron and Kenny (1986) approach 2

```{r m17, cache= TRUE}
# Indirect effect
m.coef * ma.coef
```

### Binary outcome, continuous mediator

-   True treatment effect = 1.3

#### Data generating process

```{r m18, cache= TRUE}
require(simcausal)
D <- DAG.empty()
D <- D + 
  node("A", distr = "rnorm", mean = 0, sd = 1) + 
  node("M", distr = "rnorm", mean = 0.5 * A, sd = 1) + 
  node("Y", distr = "rbern", prob = plogis(0.5 * M + 1.3 * A)) 
Dset <- set.DAG(D)
```

#### Generate DAG

```{r m19, cache= TRUE}
plotDAG(Dset, xjitter = 0.1, yjitter = .9,
        edge_attrs = list(width = 0.5, arrow.width = 0.4, arrow.size = 0.7),
        vertex_attrs = list(size = 12, label.cex = 0.8))

```

#### Generate Data

```{r m20, cache= TRUE}
Obs.Data <- sim(DAG = Dset, n = 1000000, rndseed = 123)
head(Obs.Data)
```

#### Estimate effect (beta-coef)

```{r m21, cache= TRUE}
fit <- glm(Y ~ A, family=binomial(link = "logit"), data=Obs.Data)
round(coef(fit),2)
fit.am <- glm(Y ~ A + M, family=binomial(link = "logit"), data=Obs.Data)
round(coef(fit.am),2)
fit.m <- glm(M ~ A, family="gaussian", data=Obs.Data)
round(coef(fit.m),2)
```

```{r m22, cache= TRUE}
# from 1st model
a.coef <- round(coef(fit),2)[2]
a.coef
# from 2nd (adjusted) model
am.coef <- round(coef(fit.am),2)[2]
am.coef
m.coef <- round(coef(fit.am),2)[3]
m.coef
# from 3rd (mediator) model
ma.coef <- round(coef(fit.m),2)[2]
ma.coef
```

#### Baron and Kenny (1986) approach 1

```{r m23, cache= TRUE}
# Direct effect
am.coef
# Total effect
a.coef
# Indirect effect
a.coef - am.coef
```

#### Baron and Kenny (1986) approach 2

```{r m24, cache= TRUE}
# Indirect effect
m.coef * ma.coef
```

### Binary outcome, binary mediator

-   True treatment effect = 1.3

#### Data generating process

```{r m25, cache= TRUE}
require(simcausal)
D <- DAG.empty()
D <- D + 
  node("A", distr = "rnorm", mean = 0, sd = 1) + 
  node("M", distr = "rbern", prob = plogis(0.5 * A)) + 
  node("Y", distr = "rbern", prob = plogis(0.5 * M + 1.3 * A)) 
Dset <- set.DAG(D)
```

#### Generate DAG

```{r m26, cache= TRUE}
plotDAG(Dset, xjitter = 0.1, yjitter = .9,
        edge_attrs = list(width = 0.5, arrow.width = 0.4, arrow.size = 0.7),
        vertex_attrs = list(size = 12, label.cex = 0.8))

```

#### Generate Data

```{r m27, cache= TRUE}
Obs.Data <- sim(DAG = Dset, n = 1000000, rndseed = 123)
head(Obs.Data)
```

#### Estimate effect (beta-coef)

```{r m28, cache= TRUE}
fit <- glm(Y ~ A, family=binomial(link = "logit"), data=Obs.Data)
round(coef(fit),2)
fit.am <- glm(Y ~ A + M, family=binomial(link = "logit"), data=Obs.Data)
round(coef(fit.am),2)
fit.m <- glm(M ~ A, family=binomial(link = "logit"), data=Obs.Data)
round(coef(fit.m),2)
```

```{r m29, cache= TRUE}
# from 1st model
a.coef <- round(coef(fit),2)[2]
a.coef
# from 2nd (adjusted) model
am.coef <- round(coef(fit.am),2)[2]
am.coef
m.coef <- round(coef(fit.am),2)[3]
m.coef
# from 3rd (mediator) model
ma.coef <- round(coef(fit.m),2)[2]
ma.coef
```

#### Baron and Kenny (1986) approach 1

```{r m30, cache= TRUE}
# Direct effect
am.coef
# Total effect
a.coef
# Indirect effect
a.coef - am.coef
```

#### Baron and Kenny (1986) approach 2

```{r m31, cache= TRUE}
# Indirect effect
m.coef * ma.coef
```


### Video content (optional)

::: callout-tip
For those who prefer a video walkthrough, feel free to watch the video below, which offers a description of an earlier version of the above content.
:::

::: {style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"}
<iframe src="https://www.youtube.com/embed/gdtBdvyVZYk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen>

</iframe>
:::