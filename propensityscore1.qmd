## Exact Matching (CCHS) {.unnumbered}

In the following code chunk, we load the necessary R libraries for our analysis. `MatchIt` is used for matching methods to find comparable control units, `tableone` for creating Table 1 to describe baseline characteristics, `Publish` for generating readable output of regression analysis, and `survey` for analyzing complex survey samples.

```{r setup, warning=FALSE, message=FALSE, cache=TRUE}
# Load required packages
library(MatchIt)
require(tableone)
require(Publish)
require(survey)
```

### Load data

In the following code chunk, we load the CCHS dataset which is related to the Canadian Community Health Survey (CCHS). We then use `ls()` to list all objects in the workspace and `str` to display the structure of the data frame, providing a quick overview of the data and checking for any character variables.

```{r data, cache=TRUE}
load("Data/propensityscore/cchs123b.RData")
ls()
str(analytic.miss) # is there any character variable?
```

### Data pre-pocessing

In the following code chunk, we define a vector containing the names of variables of interest that needs to be converted to factor variables. We then convert these variables to factors, ensuring they are treated as categorical in subsequent analyses. We also `recode` the Osteoarthritis (OA) variable into a numeric binary format and display the frequency table of OA before and after the transformation.

```{r data2, cache=TRUE}
var.names <- c("age", "sex", "stress", "married", "income", "race", 
               "bmi", "phyact", "smoke", "doctor", "drink", "bp", "province",
               "immigrate", "fruit", "diab", "edu", "CVD", "OA")
analytic.miss[var.names] <- lapply(analytic.miss[var.names] , factor)
table(analytic.miss$OA)
analytic.miss$OA <- as.numeric(analytic.miss$OA=="OA") 
table(analytic.miss$OA)
```

### Identify subjects with missing

In the following code chunk, we create a new variable `miss` and initially assign all its values to 1 in the full dataset (that contains some missing observations). We then adjust this assignment by setting miss to 0 for observations that are also present in another complete case dataset. That means any row with `miss` equal to 0 means that row has no missing observations. Finally, we display the frequency table of the miss variable to check the number of missing and non-missing observations.

```{r miss, cache=TRUE}
analytic.miss$miss <- 1
head(analytic.miss$ID) # full data
head(analytic2$ID) # complete case
head(analytic.miss$ID[analytic.miss$ID %in% analytic2$ID])
# if associated with complete case, assign miss <- 0
analytic.miss$miss[analytic.miss$ID %in% analytic2$ID] <- 0
table(analytic.miss$miss)
```

### Setting Design

#### Unconditional design

In the following code chunk, we explore the summary of the weight variable and establish an unconditional survey design object `w.design0` using the `svydesign` function, which will be used for subsequent survey-weighted analyses. We then explore the summary, standard deviation, and sum of the weights within our design object.

```{r design, cache=TRUE}
summary(analytic.miss$weight)
w.design0 <- svydesign(id=~1, weights=~weight, 
                      data=analytic.miss)
summary(weights(w.design0))
sd(weights(w.design0))
sum(weights(w.design0))
```

#### Conditioning the design

In the following code chunk, we create a new survey design object `w.design` by subsetting `w.design0` to only include observations without missing data `(miss == 0)`. We then explore the summary, standard deviation, and sum of the weights within this new design object.

```{r design2, cache=TRUE}
w.design <- subset(w.design0, miss == 0)
summary(weights(w.design))
sd(weights(w.design))
sum(weights(w.design))
```

#### Subset data (more!)

We subset the data for fast results (less computation). We will only work with cycle 1.1, and the people from Northern provinces in Canada.

```{r design3, cache=TRUE}
w.design1 <- subset(w.design, cycle == 11 & province == "North")
sum(weights(w.design1))
```

### Preliminary analysis

#### Table 1

In the following code chunk, we define a new variable vector `var.names` and create a categorical table using `svyCreateCatTable` to explore the distribution of `age` and `sex` across strata of `OA` within our subsetted design object `w.design1`. We then print the table with standardized mean differences (SMD) to assess the balance of these variables across strata.

```{r tab, cache=TRUE}
var.names <- c("age", "sex")
tab0 <- svyCreateCatTable(var = var.names, strata= "OA", data=w.design1,test=FALSE)
print(tab0, smd = TRUE)
```

#### Treatment effect

In the following code chunk, we fit a logistic regression model using `svyglm` to estimate the effect of `OA` and other covariates on the binary outcome `CVD` (cardiovascular disease). We then use `publish` to display the results in a readable format.

```{r tx, cache=TRUE}
fit.outcome <- svyglm(I(CVD=="event") ~ OA + age + sex + stress + married + 
                         income + race + bmi + phyact + smoke +
                         immigrate + fruit + diab + edu,
                   design = w.design1,
                   family = binomial(logit))
publish(fit.outcome)
```

### Matching: Estimating treatment effect

Going back to the data (**not working on design here while matching**)

In the following code chunk, we create a new dataset by omitting `NA` values from `analytic.miss` and converting it to a data frame. We then create a subset `analytic11n` which includes only observations from cycle 1.1 and the Northern provinces. We display the dimensions of this subset, as well as frequency tables of `OA` and a cross-tabulation of `OA` and `age` to understand the distribution of our target variable and a key covariate.

```{r effect, cache=TRUE}
# Create the dataset without design features
analytic2 <- as.data.frame(na.omit(analytic.miss))
analytic11n <- subset(analytic2, cycle == 11 & province == "North")
dim(analytic11n)
table(analytic11n$OA)
table(analytic11n$OA,analytic11n$age)
```

#### Matching by 1 matching variable

In the following code chunk, we perform exact matching using a single variable, `age`. We define the matching formula and apply the `matchit` function to create matched sets of treated and control units. The resulting `matching.obj` object is displayed to summarize the matching results.

```{r match1, cache=TRUE}
match.formula <- as.formula("OA ~ age")
matching.obj <- matchit(match.formula,
                        data = analytic11n,
                        method = "exact")
matching.obj
```

#### Matching by 2 matching variables

In the following code chunk, we extend the matching to include two variables, `age` and `sex`. We create a new variable `var.comb` that concatenates these two variables and display its frequency table and the number of unique combinations. We then perform exact matching using both variables and display the resulting object.

```{r match2, cache=TRUE}
var.comb <- do.call('paste0', 
                    analytic11n[, c('age', 'sex')])
table(var.comb)
length(table(var.comb))
match.formula <- as.formula("OA ~ age + sex")
matching.obj <- matchit(match.formula,
                        data = analytic11n,
                        method = "exact")
matching.obj
```

#### Matching by 3 matching variables

In the following code chunk, we further extend the matching to include three variables: `age`, `sex`, and `stress`. We explore the unique combinations of these variables and their distribution across levels of `OA`. We then perform exact matching using these three variables and display the resulting object.

```{r match3, cache=TRUE}
var.comb <- do.call('paste0', 
                    analytic11n[, c('age', 'sex', 'stress')])
table(var.comb)
length(table(var.comb))
table(var.comb,analytic11n$OA)
match.formula <- as.formula("OA ~ age + sex + stress")
matching.obj <- matchit(match.formula,
                        data = analytic11n,
                        method = "exact")
matching.obj
```

#### Matching by 4 matching variables

The process of matching by 4 variables involves creating combinations of the 4 variables, exploring their distributions, and performing exact matching.

```{r match4, cache=TRUE}
var.comb <- do.call('paste0', 
                    analytic11n[, c('age', 'sex',
                                    'stress','income')])
#table(var.comb)
length(table(var.comb))
match.formula <- as.formula("OA ~ age + sex + stress + income")
matching.obj <- matchit(match.formula,
                        data = analytic11n,
                        method = "exact")
matching.obj
```

#### Matching by 5 matching variables

```{r match5, cache=TRUE}
var.comb <- do.call('paste0', 
                    analytic11n[, c('age', 'sex',
                                    'stress','income','race')])
length(table(var.comb))
match.formula <- as.formula("OA ~ age + sex + stress + income + race")
matching.obj <- matchit(match.formula,
                        data = analytic11n,
                        method = "exact")
matching.obj
```

#### Matching by 6 matching variables

```{r match6, cache=TRUE}
var.comb <- do.call('paste0', 
                    analytic11n[, c('age', 'sex',
                                    'stress','income','race','edu')])
length(table(var.comb))
match.formula <- as.formula("OA ~ age + sex + stress + income + race + edu")
matching.obj <- matchit(match.formula,
                        data = analytic11n,
                        method = "exact")
matching.obj
OACVD.match.11n <- match.data(matching.obj)
var.names <- c("age", "sex", "stress", "income", "race", "edu")
tab1 <- CreateCatTable(var = var.names, strata= "OA", data=OACVD.match.11n,test=FALSE)
print(tab1, smd = TRUE)
```

### Treatment effect

#### Convert data to design

In the following code chunk, we create a new variable matched in the `analytic.miss` dataset to indicate whether an observation was included in the matched dataset `OACVD.match.11n`. We then create a new survey design object `w.design.m` that includes only the matched observations for subsequent analyses.

```{r tx2, cache=TRUE}
analytic.miss$matched <- 0
length(analytic.miss$ID) # full data
length(OACVD.match.11n$ID) # matched data
length(analytic.miss$ID[analytic.miss$ID %in% OACVD.match.11n$ID])
analytic.miss$matched[analytic.miss$ID %in% OACVD.match.11n$ID] <- 1
table(analytic.miss$matched)
w.design0 <- svydesign(id=~1, weights=~weight, 
                      data=analytic.miss)
w.design.m <- subset(w.design0, matched == 1)
```

#### Outcome analysis

The subsequent code chunks involve fitting logistic regression models to estimate the treatment effect, both in a crude and adjusted manner, respectively. The models are fitted using the matched survey design object and the results are displayed in a readable format.

##### Crude

```{r est2, cache=TRUE}
fit.outcome <- svyglm(I(CVD=="event") ~ OA,
                   design = w.design.m,
                   family = binomial(logit))
publish(fit.outcome)
```

##### Adjusted

```{r est3, cache=TRUE}
fit.outcome <- svyglm(I(CVD=="event") ~ OA + 
                        age + sex + stress + income + race + edu,
                   design = w.design.m,
                   family = binomial(logit))
publish(fit.outcome)
```

#### Questions for the students

-   Look at all the ORs. Some of them are VERY high. Why?
-   Look at the CI in the above table. Some of them are Inf. Why?
-   Should we match matching variables in the regression?

### Matching by a lot of variables

The code chunks involve performing matching using a large number of variables and estimating the treatment effect using the matched data. The process involves creating matched datasets, converting them to survey design objects, and fitting logistic regression models.

#### Matching part in data

```{r match10, cache=TRUE}
match.formula <- as.formula("OA ~ age + sex + stress + married + 
                         income + race + bmi + phyact + smoke +
                         immigrate + fruit + diab + edu")
matching.obj2 <- matchit(match.formula,
                        data = analytic11n,
                        method = "exact")
matching.obj2
OACVD.match.11n2 <- match.data(matching.obj2)
var.names <- c("age", "sex", "stress", "married", "income", "race", 
               "bmi", "phyact", "smoke", "immigrate", "fruit", "diab", "edu")
tab2 <- CreateCatTable(var = var.names, strata= "OA", data=OACVD.match.11n2,test=FALSE)
print(tab2, smd = TRUE)
```

#### Treatment effect estimation in design

##### Create design

```{r match11, cache=TRUE}
analytic.miss$matched2 <- 0
length(analytic.miss$ID) # full data
length(OACVD.match.11n2$ID) # matched data
length(analytic.miss$ID[analytic.miss$ID %in% OACVD.match.11n2$ID])
analytic.miss$matched2[analytic.miss$ID %in% OACVD.match.11n2$ID] <- 1
table(analytic.miss$matched2)
w.design0 <- svydesign(id=~1, weights=~weight, 
                      data=analytic.miss)
w.design.m2 <- subset(w.design0, matched2 == 1)
```

##### outcome analysis

```{r match12, eval=FALSE, cache=TRUE}
fit.outcome <- svyglm(I(CVD=="event") ~ OA + age + sex + stress + married +
                         income + race + bmi + phyact + smoke +
                         immigrate + fruit + diab + edu,
                   design = w.design.m2,
                   family = binomial(logit))
publish(fit.outcome)
# Error in `contrasts<-`(`*tmp*`, value = contr.funs[1 + isOF[nn]]) : 
#   contrasts can be applied only to factors with 2 or more levels
```

##### Questions for the students

-   Why the above model not fitting?

### Save data for later use

```{r savedata, cache=TRUE}
save(analytic11n, analytic2, analytic.miss, file="Data/propensityscore/cchs123c.RData")
```

### Video content (optional)

::: callout-tip
For those who prefer a video walkthrough, feel free to watch the video below, which offers a description of an earlier version of the above content.
:::

::: {style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"}
<iframe src="https://www.youtube.com/embed/jC8g_n6RqK0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen>

</iframe>
:::
