## Data spliting {.unnumbered}

::: callout-important
This tutorial is very similar to one of the [previous tutorials](redictivefactors5.html), but uses a different data (we used [RHC data](researchquestion1.html) here). We are revisiting concepts related to [prediction](predictivefactors.html) before introducing ideas related to machine learning. 
:::

```{r setup, warning=FALSE, message=FALSE, cache=TRUE, include=FALSE}
# Load required packages
require(caret)
require(DataExplorer)
```

### Load dataset

```{r data, cache=TRUE}
ObsData <- readRDS(file = "Data/machinelearning/rhcAnalytic.RDS")
head(ObsData)
```

See [@datasplit; @datasplit2]

```{r split1, cache=TRUE}
# Using a seed to randomize in a reproducible way 
set.seed(123)
require(caret)
split<-createDataPartition(y = ObsData$Length.of.Stay, 
                           p = 0.7, list = FALSE)
str(split)
dim(split)
dim(ObsData)*.7 # approximate train data
dim(ObsData)*(1-.7) # approximate train data
```

### Split the data

```{r split2, cache=TRUE}
# create train data
train.data<-ObsData[split,]
dim(train.data)
# create test data
test.data<-ObsData[-split,]
dim(test.data)
```

### Train the model

```{r train, cache=TRUE}
out.formula1 <- readRDS(file = "Data/machinelearning/form1.RDS")
out.formula1
fit.train1<-lm(out.formula1, data = train.data)
# summary(fit.train1)
```

### Function that gives performance measures

```{r func, cache=TRUE}
perform <- function(new.data,
                    model.fit,model.formula=NULL, 
                    y.name = "Y",
                    digits=3){
  # data dimension
  p <- dim(model.matrix(model.fit))[2]
  # predicted value
  pred.y <- predict(model.fit, new.data)
  # sample size
  n <- length(pred.y)
  # outcome
  new.data.y <- as.numeric(new.data[,y.name])
  # R2
  R2 <- caret:::R2(pred.y, new.data.y)
  # adj R2 using alternate formula
  df.residual <- n-p
  adjR2 <- 1-(1-R2)*((n-1)/df.residual)
  # RMSE
  RMSE <-  caret:::RMSE(pred.y, new.data.y)
  # combine all of the results
  res <- round(cbind(n,p,R2,adjR2,RMSE),digits)
  # returning object
  return(res)
}
```

### Extract performance measures

```{r perf, cache=TRUE}
perform(new.data=train.data,
        y.name = "Length.of.Stay",
        model.fit=fit.train1)
perform(new.data=test.data,
        y.name = "Length.of.Stay",
        model.fit=fit.train1)
perform(new.data=ObsData,
        y.name = "Length.of.Stay",
        model.fit=fit.train1)
```

### Video content (optional)

::: callout-tip
For those who prefer a video walkthrough, feel free to watch the video below, which offers a description of an earlier version of the above content.
:::

::: {style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"}
<iframe src="https://www.youtube.com/embed/PdrjcM_dTlw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen>

</iframe>
:::

### References
