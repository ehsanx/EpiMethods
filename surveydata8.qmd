## Subsetting {.unnumbered}

```{r setup, warning=FALSE, message=FALSE, cache=TRUE}
# Load required packages
library(survey)
library(Publish)
library(DataExplorer)
```

### Load data

```{r load, cache=TRUE}
load("Data/surveydata/NHANES17.RData")
ls()
```

### Check missingness

```{r miss0, cache=TRUE}
Vars <- c("ID", 
          "weight", 
          "psu", 
          "strata", 
          "gender", 
          "born", 
          "race", 
          "bmi", 
          "cholesterol", 
          "diabetes")
analytic.full.data <- analytic.with.miss[,Vars]
analytic.full.data$cholesterol.bin <- ifelse(analytic.full.data$cholesterol <200, "healthy", "unhealthy")
analytic.full.data$cholesterol <- NULL

require(DataExplorer)
plot_missing(analytic.full.data)
```

### Subsetting Complex Survey data

We are subsetting based on whether the subjects have missing observation (e.g., only retaining those with complete information). This is aften an eligibility criteria in studies. In missing data analysis, we will learn more about more appropriate approaches.

```{r subset0, cache=TRUE}
dim(analytic.full.data)
head(analytic.full.data$ID) # full data
analytic.complete.case.only <- as.data.frame(na.omit(analytic.full.data))
dim(analytic.complete.case.only)
head(analytic.complete.case.only$ID) # complete case
head(analytic.full.data$ID[analytic.full.data$ID %in% analytic.complete.case.only$ID])
```

Below we show how to identify who has missing observations vs not based on full (`analytic.full.data`) and complete case (`analytic.complete.case.only`) data. See Heeringa et al (2010) book page 114 (section 4.5.3 "Preparation for Subclass analyses") and also page 218 (section 7.5.4 "appropriate analysis: incorporating all Sample Design Features"). This is done for 2 reasons:

-   full complex survey design structure is taken into account, so that variance estimation is done correctly. If one or more PSU were excluded because none of the complete cases were observed in those PSU, the sub-population (complete cases) will not have complete information of how many PSU were actually present in the original complex design. Then in the population, a reduced number of PSUs would be used to calculate variance (number of SPU is a component of the variance calculation formula, see equation (5.2) in Heeringa et al (2010) textbook. Same is true for strata.), and will result in a wrong/biased variance estimate. Also see West et al. doi: 10.1177/1536867X0800800404
-   size of sub-population (here, those with complete cases) is recognized as a random variable; not just a fixed size.

```{r subset1, cache=TRUE}
# assign missing indicator
analytic.full.data$miss <- 1 
# assign missing indicator = 0 if the observation is available
analytic.full.data$miss[analytic.full.data$ID %in% analytic.complete.case.only$ID] <- 0
```

```{r subset2, cache=TRUE}
table(analytic.full.data$miss)
# IDs not in complete case data
head(analytic.full.data$ID[analytic.full.data$miss==1])
# IDs in complete case data
head(analytic.full.data$ID[analytic.full.data$miss==0])
```

### Logistic regression on sub-population

```{r logis, warning=FALSE, message=FALSE}
require(survey)
require(Publish)
model.formula <- as.formula("I(cholesterol.bin=='healthy')~
                            diabetes+gender+born+race+bmi")
```

#### Wrong approach

```{r wrong1, cache=TRUE}
w.design.wrong <- svydesign(ids=~psu, 
                       weights=~weight, 
                       strata=~strata,
                       data = analytic.complete.case.only, #wrong!!
                       nest = TRUE)
```

#### Correct approach

```{r correct1, cache=TRUE}
w.design0 <- svydesign(ids=~psu, 
                       weights=~weight, 
                       strata=~strata,
                       data = analytic.full.data, 
                       nest = TRUE)

# retain only those that have complete observation / no missing
w.design <- subset(w.design0, miss == 0)# this is the subset design
```

#### Full model

```{r full, cache=TRUE}
fit <- svyglm(model.formula, family = quasibinomial, 
              design = w.design) # subset design
publish(fit)
```

### Variable selection

If unsure about usefulness of some (gender, born, race, bmi) variables in predicting the outcome, check via backward elimination while keeping important variable (diabetes, say, that has been established in the literature) in the model

```{r varselect, cache=TRUE}
model.formula <- as.formula("I(cholesterol.bin=='healthy')~
                            diabetes+gender+born+race+bmi")

scope <- list(upper = ~ diabetes+gender+born+race+bmi, lower = ~ diabetes)

fit <- svyglm(model.formula, design=w.design, # subset design
              family=quasibinomial)

fitstep <- step(fit,  scope = scope, trace = FALSE, direction = "backward")
publish(fitstep) # final model
```

Also see [@subpopulation] for further details.

## YouTube Videos

You could watch the videos describing [creating an analytic dataset](https://youtu.be/OWVV1O3iYmA), [checking](https://youtu.be/d5-dWdAhsZQ), [appropriate weight assignment](https://youtu.be/5q_GyL5FsVg), [logistic regression](https://youtu.be/ebFkdeHV6m8), [model performance](https://youtu.be/n9WSFJH8FcQ), [analyzing NHANES](https://youtu.be/6GfpPKPnLEE), [analyzing another NHANES dataset](https://youtu.be/78EHsUZDePc), and [subpopulation in complex survey data](https://youtu.be/A8p2zu-JlBU).

### References
