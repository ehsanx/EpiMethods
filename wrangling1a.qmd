## R basics {.unnumbered}

::: callout-important
**Show/hide code**:

On every page, at the top, you'll find a `</>` button. Click it to toggle the visibility of all R code on the page at once. Alternatively, you can click 'Show the code' within individual code chunks to view code on a case-by-case basis.
:::

```{r setup, warning=FALSE, message=FALSE, include=FALSE}
# Load required packages
library(tidyverse)
library(dplyr)
```

### Start using R

To get started with R, follow these steps:

-   Download and Install R: Grab the newest version from the official [R website](https://www.r-project.org/). \> *Tip: Download from a Comprehensive R Archive Network (CRAN) server near your geographic location.*

-   Download and Install RStudio: You can get it from [this link](https://posit.co/download/rstudio-desktop/). \> *Note: RStudio serves as an Integrated Development Environment (IDE) offering a user-friendly interface. It facilitates operations such as executing R commands, preserving scripts, inspecting results, managing data, and more.*

-   Begin with RStudio: Once you open RStudio, delve into using R. For starters, employ the R syntax for script preservation, allowing future code adjustments and additions.

### Basic syntax

::: callout-tip
R, a versatile programming language for statistics and data analysis, can execute numerous tasks. Let's break down some of the fundamental aspects of R's syntax.
:::

1.  Using R as a Calculator

Similar to how you'd use a traditional calculator for basic arithmetic operations, R can perform these functions with ease. For instance:

```{r basic1, cache=TRUE}
# Simple arithmetic
1 + 1
```

This is a basic addition, resulting in 2.

A more intricate calculation:

```{r basic2, cache=TRUE}
# Complex calculation involving 
# multiplication, subtraction, division, powers, and square root
20 * 5 - 10 * (3/4) * (2^3) + sqrt(25)
```

This demonstrates R's capability to handle complex arithmetic operations.

2.  Variable Assignment in R

R allows you to store values in variables, acting like labeled containers that can be recalled and manipulated later. For example,

```{r basic3, cache=TRUE}
# Assigning a value of 2 to variable x1
x1 <- 2
print(x1)
```

Similarly:

```{r basic4, cache=TRUE}
x2 <- 9
x2
```

3.  Creating New Variables Using Existing Ones

You can combine and manipulate previously assigned variables to create new ones.

```{r basic5, cache=TRUE}
# Using variable x1 
# to compute its square and assign to y1
y1 <- x1^2
y1
```

You can also use multiple variables in a single expression:

```{r basic6, cache=TRUE}
y2 <- 310 - x1 + 2*x2 - 5*y1^3
y2
```

4.  Creating Functions

Functions act as reusable blocks of code. Once defined, they can be called multiple times with different arguments. Here's how to define a function that squares a number:

```{r basic7, cache=TRUE}
z <- function(x) {x^2}
```

R also comes with a plethora of built-in functions. Examples include `exp` (exponential function) and `rnorm` (random number generation from a normal distribution).

5.  Utilizing Built-In Functions

For instance, using the exponential function:

```{r basic8, cache=TRUE}
# Calling functions
exp(x1)
log(exp(x1))
```

The `rnorm` function can generate random samples from a normal distribution: below we are generating 10 random sampling from the normal distribution with mean 0 and standard deviation 1:

```{r basic9, cache=TRUE}
rnorm(n = 10, mean = 0, sd = 1)
```

As random number generation relies on algorithms, results will differ with each execution.

```{r basic10, cache=TRUE}
# Random sampling (again)
rnorm(n = 10, mean = 0, sd = 1)
```

However, by setting a `seed`, we can reproduce identical random results:

```{r seed, cache=TRUE}
# Random sampling (again, but with a seed)
set.seed(11)
rnorm(n = 10, mean = 0, sd = 1)
```

```{r seed1, cache=TRUE}
# random sampling (reproducing the same numbers)
set.seed(11)
rnorm(n = 10, mean = 0, sd = 1)
```

As we can see, when we set the same seed, we get exactly the same random number. This is very important for reproducing the same results. There are many other pre-exiting functions in R.

6.  Seeking Help in R

::: callout-tip
R's help function, invoked with `?function_name`, provides detailed documentation on functions, assisting users with unclear or forgotten arguments:
:::

```{r curve1, cache=TRUE, eval=FALSE}
# Searching for help if you know 
# the exact name of the function with a question mark
?curve
```

Below is an example of using the pre-exiting function for plotting a curve ranging from -10 to 10.

```{r curve, cache=TRUE}
# Plotting a function
curve(z, from = -10, to = 10, xlab = "x", ylab = "Squared x")
```

If some of the arguments are difficult to remember or what else could be done with that function, we could use the `help` function. For example, we can simply type `help(curve)` or `?curve` to get help on the `curve` function:

::: callout-tip
If you're uncertain about a function's precise name, two question marks can assist in the search:
:::

```{r boxplot, cache=TRUE, eval=FALSE}
# Searching for help if don't know 
# the exact name of the function
??boxplot
```

7.  Creating Vectors

Vectors are sequences of data elements of the same basic type. Here are some methods to create them:

```{r vector, cache=TRUE}
# Creating vectors in different ways
x3 <- c(1, 2, 3, 4, 5)
print(x3)

x4 <- 1:7
print(x4)

x5 <- seq(from = 0, to = 100, by = 10)
print(x5)

x6 <- seq(10, 30, length = 7)
x6
```

8.  Plotting in R

R provides numerous plotting capabilities. For instance, the plot function can create scatter plots and line graphs:

```{r plot2, cache=TRUE}
# Scatter plot
plot(x5, type = "p", main = "Scatter plot")
```

```{r plot3, cache=TRUE}
# Line graph
plot(x = x6, y = x6^2, type = "l", main = "Line graph")
```

9.  Character Vectors Apart from numeric values, R also allows for character vectors. For example, we can create a `sex` variable coded as females, males and other.

```{r character, cache=TRUE}
# Character vector
sex <- c("females", "males", "other")
sex
```

To determine a variable's type, use the mode function:

```{r mode, cache=TRUE}
# Check data type
mode(sex)
```

### Package Management

Packages in R are collections of functions and datasets developed by the community. They enhance the capability of R by adding new functions for data analysis, visualization, data import, and more. Understanding how to install and load packages is essential for effective R programming.

1.  Installing Packages from CRAN

The CRAN is a major source of R packages. You can install them directly from within R using the `install.packages()` function.

```{r, eval=FALSE}
# Installing the 'ggplot2' package
install.packages("ggplot2")
```

2.  Loading a Package

After a package is installed, it must be loaded to use its functions. This is done with the `library()` function.

```{r, eval=FALSE}
# Loading the 'ggplot2' package
library(ggplot2)
```

You only need to install a package once, but you'll need to load it every time you start a new R session and want to use its functions.

3.  Updating Packages

R packages are frequently updated. To ensure you have the latest version of a package, use the `update.packages()` function.

```{r, eval=FALSE}
# Updating all installed packages
# could be time consuming!
update.packages(ask = FALSE)  
# 'ask = FALSE' updates all without asking for confirmation
```

4.  Listing Installed Packages

You can view all the installed packages on your R setup using the installed.packages() function.

```{r, eval=FALSE}
# Listing installed packages
installed.packages()[, "Package"]
```

5.  Removing a Package

If you no longer need a package, it can be removed using the `remove.packages()` function.

```{r, eval=FALSE}
# Removing the 'ggplot2' package
remove.packages("ggplot2")
```

6.  Installing Packages from Other Sources

While CRAN is the primary source, sometimes you might need to install packages from GitHub or other repositories. The `devtools` package provides a function for this.

```{r, eval=FALSE}
# Installing devtools first
install.packages("devtools")
# Loading devtools
library(devtools)
# Install a package from GitHub
# https://github.com/ehsanx/simMSM
install_github("ehsanx/simMSM")
```

When you are working on a project, it's a good practice to list and install required packages at the beginning of your R script.

### Video content (optional)

::: callout-tip
For those who prefer a video walkthrough, feel free to watch the video below, which offers a description of an earlier version of the above content.
:::

::: {style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"}
<iframe src="https://www.youtube.com/embed/wMwH7iroGIo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen>

</iframe>
:::
