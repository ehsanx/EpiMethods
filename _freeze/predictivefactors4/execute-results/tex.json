{
  "hash": "bd89920dfcbfee037e1510b12cbf4c8f",
  "result": {
    "markdown": "## Overfitting and performance {.unnumbered}\n\nThe following tutorial extends the work from the previous lab and focuses on understanding overfitting, evaluating performance, and function writing in the context of linear modeling for a continuous outcome variable, cholesterol levels. \n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/setup_0d22aae7dbbda5d35bb42b78e282a4c5'}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(caret)\nlibrary(knitr)\nlibrary(Publish)\nlibrary(car)\n```\n:::\n\n\n\n### Load data\n\nLoad the data saved at the end of previous part of the lab.\n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/load_6501759f7dd8663b314b5bd556b54007'}\n\n```{.r .cell-code}\nload(file=\"Data/predictivefactors/cholesterolNHANES15part2.RData\")\n```\n:::\n\n\n\nNow we will fit the final model that we decided at the end of previous part of the lab.\n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/lm_a38d48ac5b73e54725a5c13f5c31c307'}\n\n```{.r .cell-code}\nformula4 <- as.formula(\"cholesterol~gender + age + born + \n             race + education + married + \n             income + diastolicBP + systolicBP + \n             bmi + triglycerides + uric.acid + \n             protein + bilirubin + phosphorus + sodium + potassium + \n             globulin + calcium + physical.work + \n             physical.recreational + diabetes\")\nformula4\n#> cholesterol ~ gender + age + born + race + education + married + \n#>     income + diastolicBP + systolicBP + bmi + triglycerides + \n#>     uric.acid + protein + bilirubin + phosphorus + sodium + potassium + \n#>     globulin + calcium + physical.work + physical.recreational + \n#>     diabetes\nfit4 <- lm(formula4, data = analytic3)\nsummary(fit4)\n#> \n#> Call:\n#> lm(formula = formula4, data = analytic3)\n#> \n#> Residuals:\n#>      Min       1Q   Median       3Q      Max \n#> -115.465  -23.695   -2.598   20.017  177.264 \n#> \n#> Coefficients:\n#>                             Estimate Std. Error t value Pr(>|t|)    \n#> (Intercept)               136.871606  51.998527   2.632  0.00853 ** \n#> genderMale                -13.064857   1.802099  -7.250 5.48e-13 ***\n#> age                         0.351838   0.056116   6.270 4.22e-10 ***\n#> bornOthers                  7.877420   1.947498   4.045 5.39e-05 ***\n#> raceHispanic               -5.790547   2.323010  -2.493  0.01274 *  \n#> raceOther                  -4.879882   2.781673  -1.754  0.07950 .  \n#> raceWhite                  -0.847635   2.130149  -0.398  0.69072    \n#> educationHigh.School        2.851633   1.617435   1.763  0.07801 .  \n#> educationSchool            -2.446765   3.084409  -0.793  0.42769    \n#> marriedNever.married       -5.739509   1.997152  -2.874  0.00409 ** \n#> marriedPreviously.married   0.342206   1.968165   0.174  0.86198    \n#> incomeBetween.25kto54k     -0.867063   1.990253  -0.436  0.66312    \n#> incomeBetween.55kto99k      2.462130   2.169757   1.135  0.25658    \n#> incomeOver100k              2.626046   2.394560   1.097  0.27289    \n#> diastolicBP                 0.374971   0.062238   6.025 1.93e-09 ***\n#> systolicBP                  0.029976   0.049515   0.605  0.54497    \n#> bmi                        -0.309530   0.118927  -2.603  0.00930 ** \n#> triglycerides               0.124806   0.006427  19.419  < 2e-16 ***\n#> uric.acid                   1.357242   0.609012   2.229  0.02593 *  \n#> protein                     4.767008   2.931636   1.626  0.10406    \n#> bilirubin                  -6.060791   2.593508  -2.337  0.01952 *  \n#> phosphorus                 -0.076472   1.341957  -0.057  0.95456    \n#> sodium                     -1.026686   0.347679  -2.953  0.00318 ** \n#> potassium                   0.893507   2.283488   0.391  0.69561    \n#> globulin                   -2.198037   3.036091  -0.724  0.46915    \n#> calcium                    12.202366   2.574400   4.740 2.25e-06 ***\n#> physical.workYes           -0.439108   1.651078  -0.266  0.79030    \n#> physical.recreationalYes    1.238756   1.667670   0.743  0.45767    \n#> diabetesYes               -19.032748   2.158825  -8.816  < 2e-16 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 35.22 on 2603 degrees of freedom\n#> Multiple R-squared:  0.2415,\tAdjusted R-squared:  0.2334 \n#> F-statistic: 29.61 on 28 and 2603 DF,  p-value: < 2.2e-16\n```\n:::\n\n\n\n### Design Matrix\n\nExpands factors to a set of dummy variables.\n\n::: callout-tip\nWe can use the `model.matrix` function to construct a design/model matrix, such as expand factor variables to a matrix of dummy variable\n:::\n\nThe dimensions of the model matrix are obtained, and the total number of model parameters (`p`) is calculated.\n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/dim_27037a058cca945dd46b532ee7045228'}\n\n```{.r .cell-code}\nhead(model.matrix(fit4))\n#>    (Intercept) genderMale age bornOthers raceHispanic raceOther raceWhite\n#> 1            1          1  62          0            0         0         1\n#> 2            1          1  53          1            0         0         1\n#> 4            1          0  56          0            0         0         1\n#> 5            1          0  42          0            0         0         0\n#> 10           1          1  22          0            0         0         0\n#> 11           1          0  32          1            1         0         0\n#>    educationHigh.School educationSchool marriedNever.married\n#> 1                     0               0                    0\n#> 2                     1               0                    0\n#> 4                     0               0                    0\n#> 5                     0               0                    0\n#> 10                    0               0                    1\n#> 11                    0               0                    0\n#>    marriedPreviously.married incomeBetween.25kto54k incomeBetween.55kto99k\n#> 1                          0                      0                      1\n#> 2                          1                      0                      0\n#> 4                          0                      0                      1\n#> 5                          1                      1                      0\n#> 10                         0                      1                      0\n#> 11                         0                      1                      0\n#>    incomeOver100k diastolicBP systolicBP  bmi triglycerides uric.acid protein\n#> 1               0          70        128 27.8           158       4.2     7.5\n#> 2               0          88        146 30.8           170       7.0     7.4\n#> 4               0          72        132 42.4            93       5.4     6.1\n#> 5               0          70        100 20.3            52       3.3     7.7\n#> 10              0          70        110 28.0            77       6.0     7.4\n#> 11              0          70        120 28.2           295       5.2     7.4\n#>    bilirubin phosphorus sodium potassium globulin calcium physical.workYes\n#> 1        0.5        4.7    136      4.30      2.9     9.8                0\n#> 2        0.6        4.4    140      4.55      2.9     9.8                0\n#> 4        0.3        3.8    141      4.08      2.3     8.9                0\n#> 5        0.3        3.2    136      3.50      3.4     9.3                0\n#> 10       0.2        5.3    139      4.16      3.0     9.3                0\n#> 11       0.4        3.1    138      4.31      2.9    10.3                0\n#>    physical.recreationalYes diabetesYes\n#> 1                         0           1\n#> 2                         0           0\n#> 4                         0           0\n#> 5                         0           0\n#> 10                        1           0\n#> 11                        0           0\n\n# Dimension of the model matrix\ndim(model.matrix(fit4))\n#> [1] 2632   29\n\n# Number of parameters = intercept + slopes\np <- dim(model.matrix(fit4))[2] \np\n#> [1] 29\n```\n:::\n\n\n\n### Check prediction\n\nThe observed and predicted cholesterol values are summarized.\n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/pred_3c5cb12462f5e9766ad10742c7ad3c4a'}\n\n```{.r .cell-code}\nobs.y <- analytic3$cholesterol\nsummary(obs.y)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>    81.0   163.0   189.0   191.5   216.0   362.0\n\n# Predict the above fit on analytic3 data\npred.y <- predict(fit4, analytic3)\nsummary(pred.y)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   136.3   178.2   189.4   191.5   202.4   337.6\nn <- length(pred.y)\nn\n#> [1] 2632\nplot(obs.y,pred.y)\nlines(lowess(obs.y,pred.y), col = \"red\")\n```\n\n::: {.cell-output-display}\n![](predictivefactors4_files/figure-pdf/pred-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n\n# Prediction on a new data: fictitious.data\nstr(fictitious.data)\n#> 'data.frame':\t4121 obs. of  33 variables:\n#>  $ ID                   : num  83732 83733 83734 83735 83736 ...\n#>  $ gender               : chr  \"Male\" \"Male\" \"Male\" \"Female\" ...\n#>  $ age                  : num  62 53 78 56 42 72 22 32 56 46 ...\n#>  $ born                 : chr  \"Born in 50 US states or Washingt\" \"Others\" \"Born in 50 US states or Washingt\" \"Born in 50 US states or Washingt\" ...\n#>  $ race                 : chr  \"White\" \"White\" \"White\" \"White\" ...\n#>  $ education            : chr  \"College\" \"High.School\" \"High.School\" \"College\" ...\n#>  $ married              : chr  \"Married\" \"Previously.married\" \"Married\" \"Married\" ...\n#>  $ income               : chr  \"Between.55kto99k\" \"<25k\" \"<25k\" \"Between.55kto99k\" ...\n#>  $ weight               : num  135630 25282 12576 102079 18235 ...\n#>  $ psu                  : num  1 1 1 1 2 1 2 1 2 1 ...\n#>  $ strata               : num  125 125 131 131 126 128 128 125 126 121 ...\n#>  $ diastolicBP          : num  70 88 46 72 70 58 70 70 116 94 ...\n#>  $ systolicBP           : num  128 146 138 132 100 116 110 120 178 144 ...\n#>  $ bodyweight           : num  94.8 90.4 83.4 109.8 55.2 ...\n#>  $ bodyheight           : num  184 171 170 161 165 ...\n#>  $ bmi                  : num  27.8 30.8 28.8 42.4 20.3 28.6 28 28.2 33.6 27.6 ...\n#>  $ waist                : num  101.1 107.9 116.5 110.1 80.4 ...\n#>  $ smoke                : chr  \"Not.at.all\" \"Every.day\" \"Not.at.all\" \"Not.at.all\" ...\n#>  $ alcohol              : num  1 6 0 1 1 0 8 1 0 1 ...\n#>  $ cholesterol          : num  173 265 229 174 204 190 164 190 145 242 ...\n#>  $ cholesterolM2        : num  4.47 6.85 5.92 4.5 5.28 4.91 4.24 4.91 3.75 6.26 ...\n#>  $ triglycerides        : num  158 170 299 93 52 52 77 295 121 497 ...\n#>  $ uric.acid            : num  4.2 7 7.3 5.4 3.3 4.9 6 5.2 4.8 6.5 ...\n#>  $ protein              : num  7.5 7.4 7.3 6.1 7.7 7.1 7.4 7.4 6.9 6.8 ...\n#>  $ bilirubin            : num  0.5 0.6 0.5 0.3 0.3 0.5 0.2 0.4 0.4 0.5 ...\n#>  $ phosphorus           : num  4.7 4.4 3.6 3.8 3.2 3.7 5.3 3.1 4.1 3.6 ...\n#>  $ sodium               : num  136 140 140 141 136 140 139 138 140 138 ...\n#>  $ potassium            : num  4.3 4.55 4.7 4.08 3.5 4.2 4.16 4.31 4.5 4.27 ...\n#>  $ globulin             : num  2.9 2.9 2.8 2.3 3.4 3 3 2.9 2.9 2.6 ...\n#>  $ calcium              : num  9.8 9.8 9.7 8.9 9.3 9.3 9.3 10.3 9.5 9.3 ...\n#>  $ physical.work        : chr  \"No\" \"No\" \"No\" \"No\" ...\n#>  $ physical.recreational: chr  \"No\" \"No\" \"No\" \"No\" ...\n#>  $ diabetes             : chr  \"Yes\" \"No\" \"Yes\" \"No\" ...\n#>  - attr(*, \"na.action\")= 'omit' Named int [1:885] 16 30 39 48 50 58 61 65 67 68 ...\n#>   ..- attr(*, \"names\")= chr [1:885] \"27\" \"68\" \"90\" \"112\" ...\npred.y.new1 <- predict(fit4, fictitious.data)\nsummary(pred.y.new1)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   128.7   178.9   190.6   192.5   203.3   557.4\n```\n:::\n\n\n\n### Measuring prediction error\n\nContinuous outcomes\n\n#### R2\n\nThe Sum of Squares of Errors (SSE) and the Total Sum of Squares (SST) are calculated. The proportion of variance explained by the model is then calculated as R2.\n\n::: column-margin\nSee @coefd\n:::\n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/pe_a9bd1807cc54610ae87984e88aa0ac54'}\n\n```{.r .cell-code}\n# Find SSE\nSSE <- sum( (obs.y - pred.y)^2 )\nSSE\n#> [1] 3228460\n\n# Find SST\nmean.obs.y <- mean(obs.y)\nSST <- sum( (obs.y - mean.obs.y)^2 )\nSST\n#> [1] 4256586\n\n# Find R2\nR.2 <- 1- SSE/SST\nR.2\n#> [1] 0.2415378\n\nrequire(caret)\nR2(pred.y, obs.y)\n#> [1] 0.2415378\n```\n:::\n\n\n\n#### RMSE\n\nThe Root Mean Square Error is calculated to measure the average magnitude of the errors between predicted and observed values.\n\n::: column-margin\nSee @anova\n:::\n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/rmse_290090c67122714262d8f3b48a1cdc5f'}\n\n```{.r .cell-code}\n# Find RMSE\nRmse <- sqrt(SSE/(n-p)) \nRmse\n#> [1] 35.21767\n\nRMSE(pred.y, obs.y)\n#> [1] 35.02311\n```\n:::\n\n\n\n#### Adj R2\n\nIt provides a measure of how well the model generalizes and adjusts R2 based on the number of predictors.\n\n::: column-margin\nSee @coefd\n:::\n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/adjr2_9e83857a523cfb8be5bf9ec2f07835e4'}\n\n```{.r .cell-code}\n# Find adj R2\nadjR2 <- 1-(1-R.2)*((n-1)/(n-p))\nadjR2\n#> [1] 0.2333791\n```\n:::\n\n\n\n### Writing function\n\n#### Syntax for Writing Functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunc_name <- function (argument) {\n  A statement or multiple lines of statements\n  return(output)\n}\n```\n:::\n\n\n\n#### Example of a simple function\n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/simfunc_c370e479736eaab55f463a2744e64a76'}\n\n```{.r .cell-code}\nf1 <- function(a,b){\n  result <- a + b\n  return(result)\n}\nf1(a=1,b=3)\n#> [1] 4\nf1(a=1,b=6)\n#> [1] 7\n# setting default values\nf1 <- function(a=1,b=1){\n  result <- a + b\n  return(result)\n}\nf1()\n#> [1] 2\nf1(b = 10)\n#> [1] 11\n```\n:::\n\n\n\n#### A bit more complicated\n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/compfunc_4fa53c2e56c618413fe3a34b486e9312'}\n\n```{.r .cell-code}\n# one argument\nmodel.fit <- function(data.for.fitting){\n  formulax <- as.formula(\"cholesterol~gender + age + born\")\n  fitx <- lm(formulax, data = data.for.fitting)\n  result <- coef(fitx)\n  return(result)\n}\nmodel.fit(data.for.fitting=analytic)\n#> (Intercept)  genderMale         age  bornOthers \n#> 184.3131838  -7.8095595   0.2225745  11.1557140\nmodel.fit(data.for.fitting=analytic3)\n#> (Intercept)  genderMale         age  bornOthers \n#> 176.1286576  -4.8256829   0.3375009   7.7186190\n```\n:::\n\n::: {.cell hash='predictivefactors4_cache/pdf/compfunc2_44f4fc06c511a14041aebec21572bcf2'}\n\n```{.r .cell-code}\n# adding one more argument: digits\nmodel.fit <- function(data.for.fitting, digits=2){\n  formulax <- as.formula(\"cholesterol~gender + age + born\")\n  fitx <- lm(formulax, data = data.for.fitting)\n  result <- coef(fitx)\n  result <- round(result,digits)\n  return(result)\n}\nmodel.fit(data.for.fitting=analytic)\n#> (Intercept)  genderMale         age  bornOthers \n#>      184.31       -7.81        0.22       11.16\nmodel.fit(data.for.fitting=analytic3)\n#> (Intercept)  genderMale         age  bornOthers \n#>      176.13       -4.83        0.34        7.72\n```\n:::\n\n\n\n#### Function that gives performance measures\n\nlet us create a function that will give us the performance measures:\n\n\n\n::: {.cell hash='predictivefactors4_cache/pdf/perfom_a14c9ca6b6789a887f0d6a801bcc393b'}\n\n```{.r .cell-code}\nperform <- function(new.data,\n                    model.fit,model.formula=NULL, \n                    y.name = \"Y\",\n                    digits=3){\n  # data dimension\n  p <- dim(model.matrix(model.fit))[2]\n  \n  # predicted value\n  pred.y <- predict(model.fit, new.data)\n  \n  # sample size\n  n <- length(pred.y)\n  \n  # outcome\n  new.data.y <- as.numeric(new.data[,y.name])\n  \n  # R2\n  R2 <- caret:::R2(pred.y, new.data.y)\n  \n  # adj R2 using alternate formula\n  df.residual <- n-p\n  adjR2 <- 1-(1-R2)*((n-1)/df.residual)\n  \n  # RMSE\n  RMSE <-  caret:::RMSE(pred.y, new.data.y)\n  \n  # combine all of the results\n  res <- round(cbind(n,p,R2,adjR2,RMSE),digits)\n  \n  # returning object\n  return(res)\n}\nperform(new.data = analytic3, y.name = \"cholesterol\", model.fit = fit4)\n#>         n  p    R2 adjR2   RMSE\n#> [1,] 2632 29 0.242 0.233 35.023\n```\n:::\n\n\n\n### References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}