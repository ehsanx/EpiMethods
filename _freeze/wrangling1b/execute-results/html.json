{
  "hash": "476ee53428c0d0a91d91b1ab9473e526",
  "result": {
    "markdown": "## Data types {.unnumbered}\n\n### Matrix\n\n::: callout-tip\nIn R, matrices are two-dimensional rectangular data sets, which can be created using the `matrix()` function. It's essential to remember that all the elements of a matrix must be of the same type, such as all numeric or all character.\n:::\n\nTo construct a matrix, we often start with a vector and specify how we want to reshape it. For instance:\n\n\n::: {.cell hash='wrangling1b_cache/html/matrix0_ead2375550e123d5d4932842345ddeac'}\n\n```{.r .cell-code}\n# Matrix 1\nx <- 1:10\nmatrix1 <- matrix(x, nrow = 5, ncol = 2, byrow = TRUE)\nmatrix1\n#>      [,1] [,2]\n#> [1,]    1    2\n#> [2,]    3    4\n#> [3,]    5    6\n#> [4,]    7    8\n#> [5,]    9   10\n```\n:::\n\n\nHere, the vector x contains numbers from 1 to 10. We reshape it into a matrix with 5 rows and 2 columns. The `byrow = TRUE` argument means the matrix will be filled row-wise, with numbers from the vector.\n\nConversely, if you want the matrix to be filled column-wise, you'd set `byrow = FALSE`:\n\n\n::: {.cell hash='wrangling1b_cache/html/matrix1_799ca74afeb8cf0ef867168d99653031'}\n\n```{.r .cell-code}\n# matrix 2\nmatrix2 <- matrix(x, nrow = 5, ncol = 2, byrow = FALSE)\nmatrix2\n#>      [,1] [,2]\n#> [1,]    1    6\n#> [2,]    2    7\n#> [3,]    3    8\n#> [4,]    4    9\n#> [5,]    5   10\n```\n:::\n\n\nYou can also combine or concatenate matrices. `cbind()` joins matrices by columns while `rbind()` joins them by rows.\n\n\n::: {.cell hash='wrangling1b_cache/html/matrix2_c7fc41548a12c5d967f933aa052601a1'}\n\n```{.r .cell-code}\n# Merging 2 matrices\ncbind(matrix1, matrix2)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    2    1    6\n#> [2,]    3    4    2    7\n#> [3,]    5    6    3    8\n#> [4,]    7    8    4    9\n#> [5,]    9   10    5   10\n```\n:::\n\n::: {.cell hash='wrangling1b_cache/html/matrix3_710b72cf1ba66218941dc274353bea18'}\n\n```{.r .cell-code}\n# Appending 2 matrices\nrbind(matrix1, matrix2)\n#>       [,1] [,2]\n#>  [1,]    1    2\n#>  [2,]    3    4\n#>  [3,]    5    6\n#>  [4,]    7    8\n#>  [5,]    9   10\n#>  [6,]    1    6\n#>  [7,]    2    7\n#>  [8,]    3    8\n#>  [9,]    4    9\n#> [10,]    5   10\n```\n:::\n\n\n### List\n\n::: callout-tip\nIn R, lists can be seen as a collection where you can store a variety of different objects under a single name. This includes vectors, matrices, or even other lists. It's very versatile because its components can be of any type of R object, such as vector, matrix, array, dataframe, table, list, and so on.\n:::\n\nFor instance:\n\n\n::: {.cell hash='wrangling1b_cache/html/list1_093119f9a4ca45be7a570dc4149b7a29'}\n\n```{.r .cell-code}\n# List of 2 matrices\nlist1 <- list(matrix1, matrix2)\nlist1\n#> [[1]]\n#>      [,1] [,2]\n#> [1,]    1    2\n#> [2,]    3    4\n#> [3,]    5    6\n#> [4,]    7    8\n#> [5,]    9   10\n#> \n#> [[2]]\n#>      [,1] [,2]\n#> [1,]    1    6\n#> [2,]    2    7\n#> [3,]    3    8\n#> [4,]    4    9\n#> [5,]    5   10\n```\n:::\n\n\nLists can also be expanded to include multiple items:\n\n\n::: {.cell hash='wrangling1b_cache/html/list2_e708a6dedc5e4480c0be85b418f8e09b'}\n\n```{.r .cell-code}\nx6 <- seq(10, 30, length = 7)\nsex <- c(\"females\", \"males\", \"other\")\n# Expanding list to include more items\nlist2 <- list(list1, x6, sex, matrix1)\nlist2 \n#> [[1]]\n#> [[1]][[1]]\n#>      [,1] [,2]\n#> [1,]    1    2\n#> [2,]    3    4\n#> [3,]    5    6\n#> [4,]    7    8\n#> [5,]    9   10\n#> \n#> [[1]][[2]]\n#>      [,1] [,2]\n#> [1,]    1    6\n#> [2,]    2    7\n#> [3,]    3    8\n#> [4,]    4    9\n#> [5,]    5   10\n#> \n#> \n#> [[2]]\n#> [1] 10.00000 13.33333 16.66667 20.00000 23.33333 26.66667 30.00000\n#> \n#> [[3]]\n#> [1] \"females\" \"males\"   \"other\"  \n#> \n#> [[4]]\n#>      [,1] [,2]\n#> [1,]    1    2\n#> [2,]    3    4\n#> [3,]    5    6\n#> [4,]    7    8\n#> [5,]    9   10\n```\n:::\n\n\nCombining different types of data into a single matrix converts everything to a character type:\n\n\n::: {.cell hash='wrangling1b_cache/html/list3_3c45de98546cdf2f7302da949813b00e'}\n\n```{.r .cell-code}\n# A matrix with numeric and character variables\nid <- c(1, 2)\nscore <- c(85, 85)\nsex <- c(\"M\", \"F\")\nnew.matrix <- cbind(id, score, sex)\nnew.matrix\n#>      id  score sex\n#> [1,] \"1\" \"85\"  \"M\"\n#> [2,] \"2\" \"85\"  \"F\"\n```\n:::\n\n\nTo check the type of data in your matrix:\n\n\n::: {.cell hash='wrangling1b_cache/html/list4_e2b427378e440615d3b8121108cc1674'}\n\n```{.r .cell-code}\nmode(new.matrix)\n#> [1] \"character\"\n```\n:::\n\n\n### Data frame\n\n::: callout-tip\nAs we can see combining both numeric and character variables into a matrix ended up with a matrix of character values. To keep the numeric variables as numeric and character variables as character, we can use the `data.frame` function.\n:::\n\n1.  Creating a data frame\n\n::: column-margin\nA data frame is similar to a matrix but allows for columns of different types (numeric, character, factor, etc.). It's a standard format for storing data sets in R.\n:::\n\n\n::: {.cell hash='wrangling1b_cache/html/frame1_0d314f210cbdcd072d51e75868c4737a'}\n\n```{.r .cell-code}\ndf <- data.frame(id, score, sex)\ndf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"score\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"85\",\"3\":\"M\"},{\"1\":\"2\",\"2\":\"85\",\"3\":\"F\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nTo check the mode or type of your data frame:\n\n\n::: {.cell hash='wrangling1b_cache/html/frame2_2c0f54f08c9fe66c38f0d5dd7c3798fa'}\n\n```{.r .cell-code}\nmode(df)\n#> [1] \"list\"\n```\n:::\n\n\n2.  Extract elements\n\nData frames allow easy extraction and modification of specific elements. For example, we can extract the values on the first row and first column as follow:\n\n\n::: {.cell hash='wrangling1b_cache/html/frame3_6e4c6339f460754e7e79888aa4217206'}\n\n```{.r .cell-code}\ndf[1,1]\n#> [1] 1\n```\n:::\n\n\nSimilarly, the first column can be extracted as follows:\n\n\n::: {.cell hash='wrangling1b_cache/html/frame4_50110b90aaf961ed837a35eeac4e24ef'}\n\n```{.r .cell-code}\ndf[,1]\n#> [1] 1 2\n```\n:::\n\n\nThe first row can be extracted as follows:\n\n\n::: {.cell hash='wrangling1b_cache/html/frame5_e37a3687107f767788f819937559eb7e'}\n\n```{.r .cell-code}\ndf[1,]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"score\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"85\",\"3\":\"M\",\"_rn_\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n3.  Modifying values\n\nWe can edit the values in the data frame as well. For example, we can change the score from 85 to 90 for the id 1:\n\n\n::: {.cell hash='wrangling1b_cache/html/frame6_c4b7fa2990e8c68bca8797af585faead'}\n\n```{.r .cell-code}\ndf$score[df$id == 1] <- 90\ndf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"score\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"90\",\"3\":\"M\"},{\"1\":\"2\",\"2\":\"85\",\"3\":\"F\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWe can also change the name of the variables/columns:\n\n\n::: {.cell hash='wrangling1b_cache/html/frame7_7eb029a62a70d2be687a9ffd28b66c5f'}\n\n```{.r .cell-code}\ncolnames(df) <- c(\"Studyid\", \"Grade\", \"Sex\")\ndf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Studyid\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Grade\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"90\",\"3\":\"M\"},{\"1\":\"2\",\"2\":\"85\",\"3\":\"F\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n4.  Combining data frames\n\nWe can also merge another data frame with the same variables using the `rbind` function:\n\n\n::: {.cell hash='wrangling1b_cache/html/frame8_14338d8cd57f3f8216da3a56f8339ae7'}\n\n```{.r .cell-code}\n# Create a new dataset\ndf2 <- data.frame(Studyid = c(10, 15, 50), Grade = c(75, 90, 65), Sex = c(\"F\", \"M\", \"M\"))\n\n# Combining two data frames\ndf.new <- rbind(df, df2)\n\n# Print the first 6 rows\nhead(df.new)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Studyid\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Grade\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Sex\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"90\",\"3\":\"M\",\"_rn_\":\"1\"},{\"1\":\"2\",\"2\":\"85\",\"3\":\"F\",\"_rn_\":\"2\"},{\"1\":\"10\",\"2\":\"75\",\"3\":\"F\",\"_rn_\":\"3\"},{\"1\":\"15\",\"2\":\"90\",\"3\":\"M\",\"_rn_\":\"4\"},{\"1\":\"50\",\"2\":\"65\",\"3\":\"M\",\"_rn_\":\"5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n5.  Checking the dimensions\n\nTo see the dimension of the data frame (i.e., number of rows and columns), we can use the `dim` function:\n\n\n::: {.cell hash='wrangling1b_cache/html/frame9_1104f7f971117cbcf4aa27ea73603adf'}\n\n```{.r .cell-code}\ndim(df.new)\n#> [1] 5 3\n```\n:::\n\n\nAs we can see, we have 5 rows and 3 columns. We can use the `nrow` and `ncol` functions respectively for the same output:\n\n\n::: {.cell hash='wrangling1b_cache/html/frame10_d58ab164c85d34e3e227d5b9d4261e14'}\n\n```{.r .cell-code}\nnrow(df.new)\n#> [1] 5\nncol(df.new)\n#> [1] 3\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}