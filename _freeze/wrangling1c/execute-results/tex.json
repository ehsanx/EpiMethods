{
  "hash": "9b86718d061f9d161089b8ab58bc47c2",
  "result": {
    "markdown": "## Automating tasks {.unnumbered}\n\n### Repeating a task\n\n::: callout-tip\nThe `for` loop is a control flow statement in R that lets you repeat a particular task multiple times. This repetition is based on a sequence of numbers or values in a vector.\n:::\n\nConsider a simple real-life analogy: Imagine you are filling water in 10 bottles, one by one. Instead of doing it manually 10 times, you can set a machine to do it in a loop until all 10 bottles are filled.\n\n1.  Example 1\n\nLet's initiate a counter k at 0 and add 5 to k with each iteration of the loop (i.e., every time it \"runs\"). After 10 cycles, the loop will stop, but not before printing k in each cycle.\n\n\n\n::: {.cell hash='wrangling1c_cache/pdf/floop1_440d47a5d9ddc781b74e3c07f503774d'}\n\n```{.r .cell-code}\n# Looping and adding\nk <- 0\nfor (i in 1:10){\n  k <- k + 5\n  print(k)\n}\n#> [1] 5\n#> [1] 10\n#> [1] 15\n#> [1] 20\n#> [1] 25\n#> [1] 30\n#> [1] 35\n#> [1] 40\n#> [1] 45\n#> [1] 50\n```\n:::\n\n\n\n2.  Example 2\n\nWe create a variable `x5` containing the values of 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, and 100. Let us print the first 5 values using the `for` loop function:\n\n\n\n::: {.cell hash='wrangling1c_cache/pdf/floop2_2c402465060b5628165cf267e4e5072e'}\n\n```{.r .cell-code}\nx5 <- seq(from = 0, to = 100, by = 10)\n# Looping through a vector\nk <- 1:5\nfor (ii in k){\n  print(x5[ii])\n}\n#> [1] 0\n#> [1] 10\n#> [1] 20\n#> [1] 30\n#> [1] 40\n```\n:::\n\n\n\nThis loop cycles through the first five values of a previously created variable `x5` and prints them. Each value printed corresponds to the positions 1 to 5 in `x5`.\n\n3.  Example 3\n\nLet us use the `for` loop in a more complicated scenario. First, we create a vector of numeric values and square it:\n\n\n\n::: {.cell hash='wrangling1c_cache/pdf/floop3_1d3e1bbb0dea10d552d5d6905c2b2ba2'}\n\n```{.r .cell-code}\n# Create a vector\nk <- c(1, 3, 6, 2, 0)\nk^2\n#> [1]  1  9 36  4  0\n```\n:::\n\n\n\nThis is just squaring each value in the vector `k`.\n\n4.  Example 4\n\nUsing the `for` loop function, we can create the same vector of square values as in Example 3. To do so, (i) we create a null object, (ii) use the loop for each of the elements in the vector (k), (iii) square each of the elements, and (iv) store each of the elements of the new vector. In the example below, the length of k is 5, and the loop will run from the first to the fifth element of k. Also, k.sq\\[1\\] is the first stored value for squared-k, and k.sq\\[2\\] is the second stored value for squared-k, and so on.\n\n\n\n::: {.cell hash='wrangling1c_cache/pdf/floop4_d361f45ef6d8ceee29acd21010ecdd09'}\n\n```{.r .cell-code}\n# Looping through a vector with function\nk.sq <- NULL\nfor (i in 1:length(k)){\n  k.sq[i] <- k[i]^2\n}\n\n# Print the values\nk.sq\n#> [1]  1  9 36  4  0\n```\n:::\n\n\n\nHere, we achieve the same result as the third example but use a for loop. We prepare an empty object `k.sq` and then use the loop to square each value in `k`, storing the result in `k.sq`.\n\n5.  Example 5\n\n\n\n::: {.cell hash='wrangling1c_cache/pdf/floop5_bc74b226c906901dabc4c3561fd9852e'}\n\n```{.r .cell-code}\ndf.new <- data.frame(\n  Studyid = c(1, 2, 10, 15, 50),\n  Grade = c(90, 85, 75, 90, 65),\n  Sex = c('M', 'F', 'F', 'M', 'M')\n)\n# Looping through a data frame\nfor (i in 1:nrow(df.new)){\n  print(df.new[i,\"Sex\"])\n}\n#> [1] \"M\"\n#> [1] \"F\"\n#> [1] \"F\"\n#> [1] \"M\"\n#> [1] \"M\"\n```\n:::\n\n\n\nThis loop prints the \"Sex\" column value for each row in the df.new data frame.\n\n### Functions\n\n::: callout-tip\nA function in R is a piece of code that can take inputs, process them, and return an output. There are functions built into R, like `mean()`, which calculates the average of a set of numbers.\n:::\n\n1.  Built-in function\n\n\n\n::: {.cell hash='wrangling1c_cache/pdf/func1_22cde4d3b3fa0800a775d3c649f5d65e'}\n\n```{.r .cell-code}\n# Calculating a mean from a vector\nVector <- 1:100\nmean(Vector)\n#> [1] 50.5\n```\n:::\n\n\n\nHere, we're using the built-in `mean()` function to find the average of numbers from 1 to 100.\n\n2.  Custom-made function\n\nTo understand how functions work, sometimes it's helpful to build our own. Now we will create our own function to calculate the mean, where we will use the following equation to calculate it:\n\n$\\text{Mean} = \\frac{\\sum_{i=1}^{n} x_i}{n},$\n\nwhere $x_1$, $x_2$,..., $x_n$ are the values in the vector and $n$ is the sample size. Let us create the function for calculation the mean:\n\nThis function, `mean.own`, calculates the average. We add up all the numbers in a vector (`Sum <- sum(x)`) and divide by the number of items in that vector (`n <- length(x)`). The result is then returned.\n\n\n\n::: {.cell hash='wrangling1c_cache/pdf/func2_e0249311b961088de182a051c1410e2e'}\n\n```{.r .cell-code}\nmean.own <- function(x){\n  Sum <- sum(x)\n  n <- length(x)\n  return(Sum/n)\n}\n```\n:::\n\n\n\nBy using our custom-made function, we calculate the mean of numbers from 1 to 100, getting the same result as the built-in `mean()` function.\n\n\n\n::: {.cell hash='wrangling1c_cache/pdf/func3_6fd0b404c051d296503b18bd983ab2d0'}\n\n```{.r .cell-code}\nmean.own(Vector)\n#> [1] 50.5\n```\n:::\n\n\n\n### Video content (optional)\n\n::: callout-tip\nFor those who prefer a video walkthrough, feel free to watch the video below, which offers a description of an earlier version of the above content.\n::: \n\n<div style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\">\n  <iframe src=\"https://www.youtube.com/embed/A5TTDqhvBrM\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen></iframe>\n</div>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}