{
  "hash": "942a05bb488a5b1e26c468a41bb5d210",
  "result": {
    "markdown": "## Data spliting {.unnumbered}\n\n::: callout-important\nThis tutorial is very similar to one of the [previous tutorials](predictivefactors5.html), but uses a different data (we used [RHC data](researchquestion1.html) here). We are revisiting concepts related to [prediction](predictivefactors.html) before introducing ideas related to machine learning. \n:::\n\n\n\n\n\n\n\n### Load dataset\n\n\n\n::: {.cell hash='machinelearning2_cache/pdf/data_3af822b772fc4e76e71fb21579f0a688'}\n\n```{.r .cell-code}\nObsData <- readRDS(file = \"Data/machinelearning/rhcAnalytic.RDS\")\nhead(ObsData)\n#>   Disease.category          Cancer Death Cardiovascular Congestive.HF Dementia\n#> 1            Other Localized (Yes)     0              0             0        0\n#> 2             MOSF            None     1              1             1        0\n#> 3             MOSF Localized (Yes)     0              0             0        0\n#> 4              ARF            None     1              0             0        0\n#> 5             MOSF            None     1              0             0        0\n#> 6            Other            None     0              0             1        0\n#>   Psychiatric Pulmonary Renal Hepatic GI.Bleed Tumor Immunosupperssion\n#> 1           0         1     0       0        0     1                 0\n#> 2           0         0     0       0        0     0                 1\n#> 3           0         0     0       0        0     1                 1\n#> 4           0         0     0       0        0     0                 1\n#> 5           0         0     0       0        0     0                 0\n#> 6           0         1     0       0        0     0                 0\n#>   Transfer.hx MI       age    sex       edu DASIndex APACHE.score\n#> 1           0  0   [70,80)   Male 12.000000 23.50000           46\n#> 2           1  0   [70,80) Female 12.000000 14.75195           50\n#> 3           0  0 [-Inf,50) Female 14.069916 18.13672           82\n#> 4           0  0   [70,80) Female  9.000000 22.92969           48\n#> 5           0  0   [60,70)   Male  9.945259 21.05078           72\n#> 6           0  0 [80, Inf) Female  8.000000 17.50000           38\n#>   Glasgow.Coma.Score blood.pressure         WBC Heart.rate Respiratory.rate\n#> 1                  0             41 22.09765620        124               10\n#> 2                  0             63 28.89843750        137               38\n#> 3                  0             57  0.04999542        130               40\n#> 4                  0             55 23.29687500         58               26\n#> 5                 41             65 29.69921880        125               27\n#> 6                  0            115 18.00000000        134               36\n#>   Temperature PaO2vs.FIO2  Albumin Hematocrit Bilirubin Creatinine Sodium\n#> 1    38.69531     68.0000 3.500000   58.00000 1.0097656  1.1999512    145\n#> 2    38.89844    218.3125 2.599609   32.50000 0.6999512  0.5999756    137\n#> 3    36.39844    275.5000 3.500000   21.09766 1.0097656  2.5996094    146\n#> 4    35.79688    156.6562 3.500000   26.29688 0.3999634  1.6999512    117\n#> 5    34.79688    478.0000 3.500000   24.00000 1.0097656  3.5996094    126\n#> 6    39.19531    184.1875 3.099609   30.50000 1.0097656  1.3999023    138\n#>   Potassium PaCo2       PH   Weight DNR.status  Medical.insurance\n#> 1  4.000000    40 7.359375 64.69995         No           Medicare\n#> 2  3.299805    34 7.329102 45.69998         No Private & Medicare\n#> 3  2.899902    16 7.359375  0.00000         No            Private\n#> 4  5.799805    30 7.459961 54.59998         No Private & Medicare\n#> 5  5.799805    17 7.229492 78.39996        Yes           Medicare\n#> 6  5.399414    68 7.299805 54.89999         No           Medicare\n#>   Respiratory.Diag Cardiovascular.Diag Neurological.Diag Gastrointestinal.Diag\n#> 1              Yes                 Yes                No                    No\n#> 2               No                  No                No                    No\n#> 3               No                 Yes                No                    No\n#> 4              Yes                  No                No                    No\n#> 5               No                 Yes                No                    No\n#> 6              Yes                  No                No                    No\n#>   Renal.Diag Metabolic.Diag Hematologic.Diag Sepsis.Diag Trauma.Diag\n#> 1         No             No               No          No          No\n#> 2         No             No               No         Yes          No\n#> 3         No             No               No          No          No\n#> 4         No             No               No          No          No\n#> 5         No             No               No          No          No\n#> 6         No             No               No          No          No\n#>   Orthopedic.Diag  race     income Length.of.Stay RHC.use\n#> 1              No white Under $11k              9       0\n#> 2              No white Under $11k             45       1\n#> 3              No white   $25-$50k             60       1\n#> 4              No white   $11-$25k             37       0\n#> 5              No white Under $11k              2       1\n#> 6              No white Under $11k              7       0\n```\n:::\n\n\n\nSee [@datasplit; @datasplit2]\n\n\n\n::: {.cell hash='machinelearning2_cache/pdf/split1_0141725d3227b75e350bf0503a0169fd'}\n\n```{.r .cell-code}\n# Using a seed to randomize in a reproducible way \nset.seed(123)\nrequire(caret)\nsplit<-createDataPartition(y = ObsData$Length.of.Stay, \n                           p = 0.7, list = FALSE)\nstr(split)\n#>  int [1:4017, 1] 1 2 3 4 5 6 7 8 9 10 ...\n#>  - attr(*, \"dimnames\")=List of 2\n#>   ..$ : NULL\n#>   ..$ : chr \"Resample1\"\ndim(split)\n#> [1] 4017    1\ndim(ObsData)*.7 # approximate train data\n#> [1] 4014.5   36.4\ndim(ObsData)*(1-.7) # approximate train data\n#> [1] 1720.5   15.6\n```\n:::\n\n\n\n### Split the data\n\n\n\n::: {.cell hash='machinelearning2_cache/pdf/split2_cb03e870ab4527cad80cc94e89997b19'}\n\n```{.r .cell-code}\n# create train data\ntrain.data<-ObsData[split,]\ndim(train.data)\n#> [1] 4017   52\n# create test data\ntest.data<-ObsData[-split,]\ndim(test.data)\n#> [1] 1718   52\n```\n:::\n\n\n\n### Train the model\n\n\n\n::: {.cell hash='machinelearning2_cache/pdf/train_15e15278c14ead5d5b7142f3e6cde303'}\n\n```{.r .cell-code}\nout.formula1 <- readRDS(file = \"Data/machinelearning/form1.RDS\")\nout.formula1\n#> Length.of.Stay ~ Disease.category + Cancer + Cardiovascular + \n#>     Congestive.HF + Dementia + Psychiatric + Pulmonary + Renal + \n#>     Hepatic + GI.Bleed + Tumor + Immunosupperssion + Transfer.hx + \n#>     MI + age + sex + edu + DASIndex + APACHE.score + Glasgow.Coma.Score + \n#>     blood.pressure + WBC + Heart.rate + Respiratory.rate + Temperature + \n#>     PaO2vs.FIO2 + Albumin + Hematocrit + Bilirubin + Creatinine + \n#>     Sodium + Potassium + PaCo2 + PH + Weight + DNR.status + Medical.insurance + \n#>     Respiratory.Diag + Cardiovascular.Diag + Neurological.Diag + \n#>     Gastrointestinal.Diag + Renal.Diag + Metabolic.Diag + Hematologic.Diag + \n#>     Sepsis.Diag + Trauma.Diag + Orthopedic.Diag + race + income + \n#>     RHC.use\nfit.train1<-lm(out.formula1, data = train.data)\n# summary(fit.train1)\n```\n:::\n\n\n\n### Function that gives performance measures\n\n\n\n::: {.cell hash='machinelearning2_cache/pdf/func_9abab2d0c207dccd9fb1a619fd30d613'}\n\n```{.r .cell-code}\nperform <- function(new.data,\n                    model.fit,model.formula=NULL, \n                    y.name = \"Y\",\n                    digits=3){\n  # data dimension\n  p <- dim(model.matrix(model.fit))[2]\n  # predicted value\n  pred.y <- predict(model.fit, new.data)\n  # sample size\n  n <- length(pred.y)\n  # outcome\n  new.data.y <- as.numeric(new.data[,y.name])\n  # R2\n  R2 <- caret:::R2(pred.y, new.data.y)\n  # adj R2 using alternate formula\n  df.residual <- n-p\n  adjR2 <- 1-(1-R2)*((n-1)/df.residual)\n  # RMSE\n  RMSE <-  caret:::RMSE(pred.y, new.data.y)\n  # combine all of the results\n  res <- round(cbind(n,p,R2,adjR2,RMSE),digits)\n  # returning object\n  return(res)\n}\n```\n:::\n\n\n\n### Extract performance measures\n\n\n\n::: {.cell hash='machinelearning2_cache/pdf/perf_8cdb761a484849854f1cabbbab1126be'}\n\n```{.r .cell-code}\nperform(new.data=train.data,\n        y.name = \"Length.of.Stay\",\n        model.fit=fit.train1)\n#>         n  p    R2 adjR2   RMSE\n#> [1,] 4017 64 0.081 0.067 24.647\nperform(new.data=test.data,\n        y.name = \"Length.of.Stay\",\n        model.fit=fit.train1)\n#>         n  p    R2 adjR2   RMSE\n#> [1,] 1718 64 0.056  0.02 25.488\nperform(new.data=ObsData,\n        y.name = \"Length.of.Stay\",\n        model.fit=fit.train1)\n#>         n  p    R2 adjR2   RMSE\n#> [1,] 5735 64 0.073 0.063 24.902\n```\n:::\n\n\n\n### Video content (optional)\n\n::: callout-tip\nFor those who prefer a video walkthrough, feel free to watch the video below, which offers a description of an earlier version of the above content.\n:::\n\n::: {style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"}\n<iframe src=\"https://www.youtube.com/embed/PdrjcM_dTlw\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen>\n\n</iframe>\n:::\n\n### References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}