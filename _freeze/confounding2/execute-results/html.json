{
  "hash": "27d529fea1ce46e1d6bcb590dd5411ff",
  "result": {
    "markdown": "## Mediator {.unnumbered}\n\nMediators play a crucial role in understanding how a treatment variable affects an outcome. A mediator variable lies in the pathway between the treatment and outcome, essentially transmitting or explaining the effect of the treatment variable. In this expanded tutorial, we'll delve into more details based on the lecture, specifically focusing on the true direct and indirect effects when a mediator is present.\n\n\n::: {.cell hash='confounding2_cache/html/setup_506967b0b456e8a37001fecaa572dc2f'}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(simcausal)\n```\n:::\n\n\nLet us consider\n\n-   M is continuous variable\n-   A is binary treatment\n-   Y is continuous outcome\n\n### Non-null effect\n\n-   True treatment effect = 1.3\n\nOur true treatment effect is 1.3, and the mediator variable's effect on the outcome Y is 0.5. It's important to differentiate between these effects.\n\n#### Data generating process\n\n\n::: {.cell hash='confounding2_cache/html/dgm_184392ae0928959755831f5250c44245'}\n\n```{.r .cell-code}\nrequire(simcausal)\nD <- DAG.empty()\nD <- D + \n  node(\"A\", distr = \"rbern\", prob = plogis(-10)) +\n  node(\"M\", distr = \"rnorm\", mean = 10 + 0.9 * A, sd = 1) + \n  node(\"Y\", distr = \"rnorm\", mean = 0.5 * M + 1.3 * A, sd = .1)\nDset <- set.DAG(D)\n```\n:::\n\n\n#### Generate DAG\n\n\n::: {.cell hash='confounding2_cache/html/dag_de5b692cf0d6579ca09f8b368c6c67ae'}\n\n```{.r .cell-code}\nplotDAG(Dset, xjitter = 0.1, yjitter = .9,\n        edge_attrs = list(width = 0.5, arrow.width = 0.4, arrow.size = 0.7),\n        vertex_attrs = list(size = 12, label.cex = 0.8))\n```\n\n::: {.cell-output-display}\n![](confounding2_files/figure-html/dag-1.png){width=672}\n:::\n:::\n\n\n#### Generate Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(simcausal)\nObs.Data <- sim(DAG = Dset, n = 1000000, rndseed = 123)\nhead(Obs.Data)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"ID\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"A\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"M\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Y\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"0\",\"3\":\"10.262000\",\"4\":\"5.276335\",\"_rn_\":\"1\"},{\"1\":\"2\",\"2\":\"0\",\"3\":\"8.479041\",\"4\":\"4.094726\",\"_rn_\":\"2\"},{\"1\":\"3\",\"2\":\"0\",\"3\":\"10.236628\",\"4\":\"5.160138\",\"_rn_\":\"3\"},{\"1\":\"4\",\"2\":\"0\",\"3\":\"10.660304\",\"4\":\"5.238211\",\"_rn_\":\"4\"},{\"1\":\"5\",\"2\":\"0\",\"3\":\"9.785994\",\"4\":\"4.966598\",\"_rn_\":\"5\"},{\"1\":\"6\",\"2\":\"0\",\"3\":\"10.192827\",\"4\":\"5.012871\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n#### Estimate effect\n\n\n::: {.cell hash='confounding2_cache/html/est_631bbe9c8af5410b7956fe7aef26e11e'}\n\n```{.r .cell-code}\n# Not adjusted for M\nfit0 <- glm(Y ~ A, family=\"gaussian\", data=Obs.Data)\nround(coef(fit0),2)\n#> (Intercept)           A \n#>        5.00        1.69\n\n# Adjusted for M\nfit <- glm(Y ~ A + M, family=\"gaussian\", data=Obs.Data)\nround(coef(fit),2)\n#> (Intercept)           A           M \n#>         0.0         1.3         0.5\n```\n:::\n\n\n::: callout-important\nYou might notice a total effect that could differ from the true effects. In the lecture example, a crude association showed an effect of 1.69, which is the total effect combining both direct and indirect pathways.\n\nUpon adjusting for M, the coefficients will show you the direct effect of A on Y and the indirect effect through M. These should align closely with our true effects: a direct effect of 1.3 and an indirect effect of 0.5.\n\nIn this expanded tutorial, we've shown how essential it is to consider mediator variables when estimating treatment effects. We've also illustrated how adjusting for mediators allows you to differentiate between true direct and indirect effects, thereby reducing the risk of drawing incorrect conclusions from your data.\n::: \n\n### Null effect\n\n-   True treatment effect = 0\n\n#### Data generating process\n\n\n::: {.cell hash='confounding2_cache/html/dgm0_04a216a32beb89309f213eddbfb6aaa0'}\n\n```{.r .cell-code}\nrequire(simcausal)\nD <- DAG.empty()\nD <- D + \n  node(\"A\", distr = \"rbern\", prob = plogis(-10)) +\n  node(\"M\", distr = \"rnorm\", mean = 10 + 0.9 * A, sd = 1) + \n  node(\"Y\", distr = \"rnorm\", mean = 0.5 * M, sd = .1)\nDset <- set.DAG(D)\n```\n:::\n\n\n#### Generate DAG\n\n\n::: {.cell hash='confounding2_cache/html/dag0_32366d394769b623eb75ec7b1a44c060'}\n\n```{.r .cell-code}\nplotDAG(Dset, xjitter = 0.1, yjitter = .9,\n        edge_attrs = list(width = 0.5, arrow.width = 0.4, arrow.size = 0.7),\n        vertex_attrs = list(size = 12, label.cex = 0.8))\n```\n\n::: {.cell-output-display}\n![](confounding2_files/figure-html/dag0-1.png){width=672}\n:::\n:::\n\n\n#### Generate Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(simcausal)\nObs.Data <- sim(DAG = Dset, n = 1000000, rndseed = 123)\nhead(Obs.Data)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"ID\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"A\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"M\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Y\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"0\",\"3\":\"10.262000\",\"4\":\"5.276335\",\"_rn_\":\"1\"},{\"1\":\"2\",\"2\":\"0\",\"3\":\"8.479041\",\"4\":\"4.094726\",\"_rn_\":\"2\"},{\"1\":\"3\",\"2\":\"0\",\"3\":\"10.236628\",\"4\":\"5.160138\",\"_rn_\":\"3\"},{\"1\":\"4\",\"2\":\"0\",\"3\":\"10.660304\",\"4\":\"5.238211\",\"_rn_\":\"4\"},{\"1\":\"5\",\"2\":\"0\",\"3\":\"9.785994\",\"4\":\"4.966598\",\"_rn_\":\"5\"},{\"1\":\"6\",\"2\":\"0\",\"3\":\"10.192827\",\"4\":\"5.012871\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n#### Estimate effect\n\n\n::: {.cell hash='confounding2_cache/html/est0_f725220f23b7db9803998ab5265b2824'}\n\n```{.r .cell-code}\n# Not adjusted for M\nfit0 <- glm(Y ~ A, family=\"gaussian\", data=Obs.Data)\nround(coef(fit0),2)\n#> (Intercept)           A \n#>        5.00        0.39\n\n# Adjusted for M\nfit <- glm(Y ~ A + M, family=\"gaussian\", data=Obs.Data)\nround(coef(fit),2)\n#> (Intercept)           A           M \n#>         0.0         0.0         0.5\n```\n:::\n\n\n::: callout-important\n**Total Effect**: If you want to measure the \"total effect\" of a treatment on an outcome, then you typically don't adjust for the mediator. The reason is that the total effect captures both the direct effect of the treatment on the outcome and the indirect effect through the mediator.\n\n**Direct and Indirect Effects**: If you want to separate out the direct and indirect effects, then you would adjust for the mediator. In essence, when you control for the mediator, what remains is the direct effect of the treatment on the outcome.\n\n**Linearity and Decomposition**: In linear models with continuous outcomes, it is more straightforward to decompose total effects into direct and indirect effects. The mathematics get more complicated in non-linear models or when dealing with non-continuous outcomes.\n::: ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}