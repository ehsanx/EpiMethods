{
  "hash": "cda33b05cbdc4d390e910d6e49319356",
  "result": {
    "markdown": "## Exercise 1 (A) Vibe Part 2 {.unnumbered}\n\nIn this tutorial, we will be going through the following exercise [(found here)](https://ehsanx.github.io/EpiMethods/accessingE.html).\n\nThis exercise replicates the analysis done in this article:\n\nPalis, Marchand & Oviedo-Joekes (2020). The relationship between sense of community belonging and self-rated mental health among Canadians with mental or substance use disorders. Journal of Mental Health, 29(2): 168–175. DOI: 10.1080/09638237.2018.1437602\n\nWe will go through the exercise questions and evaluate how well Gemini performs on each task. These tasks include applying eligibility criteria, subsetting the data in terms of variables and retaining those necessary for analysis, creating an analytic dataset, creating a Table 1, and building a logistic regression model, and presenting odds ratios with 95% confidence intervals. Additionally, we will use what we learned from the previous tutorial [(found here)](.) to streamline these exercises.\n\nIn this part of the tutorial, we will go through the second set of tasks, which includes creating a Table 1, performing logistic regression and producing odds ratios and confidence intervals. These tutorials were completed in RStudio [@rstudio] using R version 4.3.2 [@r], with the following packages: dplyr [@dplyr], car [@car], tableone [@tableone], and Publish [@publish].\n\nFor this tutorial, I used Gemini’s free 2.5 Flash model.\n\n------------------------------------------------------------------------\n\n### Load data and required packages\n\nLoad the data saved in the previous tutorial. If you just completed the last tutorial and still have the data loaded in your environment, you can skip this step.\n\n\n::: {.cell hash='accessingE1vibep2_cache/html/unnamed-chunk-1_ce8db1629bd0ebb6873c6d10e92fb665'}\n\n```{.r .cell-code}\npackages <- c(\"dplyr\", \"car\", \"tableone\", \"Publish\")\n\nlapply(packages, function(pkg) {\n  if (!require(pkg, character.only = TRUE)) install.packages(pkg, dependencies = TRUE)\n  library(pkg, character.only = TRUE)\n})\n\n\ndirectory <- \"Data/accessing\"  # Enter the path to your working directory here\n\nload(paste0(directory, \"/analytic_data.RData\"))\n\n```\n:::\n\n\n## References\n\n------------------------------------------------------------------------\n\n\\\n\n### Exercise 2a: Recode\n\nFor this first exercise, we need to recreate the Table 1 from the article. However, we need to omit the ‘Main source of income’ variable from the table.\n\nLet's send Gemini the following prompt:\n\n\\\n**Prompt Sent to Gemini:**\n\n::: {.callout-note title=\"User Prompt\"}\nReproduce **Table 1** from the article using the **`tableone`** package in **RStudio**, based on the cleaned analytic dataset.\n\n-   **Stratify** the table by the variable **`srmh`** (this will be used for the columns).\n\n    Include the following variables in the table:\n\n    -   `community`\n\n    -   `sex`\n\n    -   `age`\n\n    -   `race`\n\n-   **Exclude** the variable *‘Main source of income’ (`income`*) from the table.\n\n-   Display **counts and percentages** for categorical variables, and **means with standard deviations** for continuous variables.\n\n-   Ensure that the **frequencies and percentages match** those reported in the published Table 1.\n\n-   Use the `kableone` function to print the table.\n:::\n\n\\\n**Gemini's response:**\n\nHere is the code to create a Table 1 using the `tableone` packages:\n\n::: {.callout-tip title=\"Gemini Response\"}\n\n::: {.cell hash='accessingE1vibep2_cache/html/unnamed-chunk-2_0934fdb21ad74fe83dd0d6e2f6e30670'}\n\n```{.r .cell-code}\n# Define the variables to be included in Table 1\nmyVars <- c(\"community\", \"sex\", \"age\", \"race\")\n\n# Define the stratifying variable (self-rated mental health)\nstrata <- \"srmh\"\n\n# Create Table 1 object with specified options\ntableOne <- CreateTableOne(\n  vars = myVars,\n  data = analytic_data,\n  strata = strata,\n  includeNA = FALSE, # Do not include NA counts/percentages\n  test = FALSE,      # Do not perform or display statistical tests (p-values)\n  addOverall = TRUE  # Add an overall column\n)\n\n# Print the table using kableone with desired formatting options\nprint(\n  kableone(\n    tableOne,\n    showAllLevels = TRUE,  # Show all levels for categorical variables\n    padColnames = TRUE,    # Pad column names for alignment\n    insertLevel = TRUE     # Insert a level column for hierarchical variables\n  )\n)\n#> \n#> \n#> |              |      level       |   Overall  |Poor or Fair |    Good   |Very good or excellent |\n#> |:-------------|:-----------------|:-----------|:------------|:----------|:----------------------|\n#> |n             |                  |2628        |1002         |885        |741                    |\n#> |community (%) |Very weak         |480 (18.3)  |282 (28.1)   |118 (13.3) |80 (10.8)              |\n#> |              |Somewhat weak     |857 (32.6)  |358 (35.7)   |309 (34.9) |190 (25.6)             |\n#> |              |Somewhat strong   |1005 (38.2) |288 (28.7)   |362 (40.9) |355 (47.9)             |\n#> |              |Very strong       |286 (10.9)  |74 ( 7.4)    |96 (10.8)  |116 (15.7)             |\n#> |sex (%)       |Females           |1407 (53.5) |616 (61.5)   |487 (55.0) |304 (41.0)             |\n#> |              |Males             |1221 (46.5) |386 (38.5)   |398 (45.0) |437 (59.0)             |\n#> |age (%)       |15 to 24 years    |740 (28.2)  |191 (19.1)   |264 (29.8) |285 (38.5)             |\n#> |              |25 to 34 years    |475 (18.1)  |141 (14.1)   |167 (18.9) |167 (22.5)             |\n#> |              |35 to 44 years    |393 (15.0)  |185 (18.5)   |119 (13.4) |89 (12.0)              |\n#> |              |45 to 54 years    |438 (16.7)  |220 (22.0)   |139 (15.7) |79 (10.7)              |\n#> |              |55 to 64 years    |379 (14.4)  |198 (19.8)   |113 (12.8) |68 ( 9.2)              |\n#> |              |65 years or older |203 ( 7.7)  |67 ( 6.7)    |83 ( 9.4)  |53 ( 7.2)              |\n#> |race (%)      |Non-white         |458 (17.4)  |184 (18.4)   |140 (15.8) |134 (18.1)             |\n#> |              |White             |2170 (82.6) |818 (81.6)   |745 (84.2) |607 (81.9)             |\n```\n:::\n\n:::\n\n\\\nThat matches the table presented in the paper exactly! Gemini was able to create the table using the `tableone` package and printed it cleanly with the `kableone` function.\n\n------------------------------------------------------------------------\n\n\\\n\n### Exercise 3a: Regression\n\nFor this next exercise, we need to subset the dataset such that it excludes individuals who responded either \"Very good\", or \"Excellent\" on the self-rated mental health variables. Then following this we need to recode this variable and make it binary: 'Good' vs. 'Poor'. We then want to convert this variable to a factor with 'Poor' as the reference level.\n\nLet's send Gemini the following prompt:\n\n\\\n**Prompt Sent to Gemini:**\n\n::: {.callout-note title=\"User Prompt\"}\nSubset the dataset in RStudio, excluding individuals who responded \"Very good\" or \"Excellent\" on the self-rated mental health variable.\n:::\n\n\\\n**Gemini's response:**\n\n::: {.callout-tip title=\"Gemini Response\"}\n\n::: {.cell hash='accessingE1vibep2_cache/html/unnamed-chunk-3_29f89a2b4177675550622b5f0504cd58'}\n\n```{.r .cell-code}\n# Subset the dataset to exclude individuals with \"Very good or excellent\" self-rated mental health\nsubset_data <- analytic_data %>%\n  filter(srmh != \"Very good or excellent\")\n\n# You can check the table of srmh in the new dataset\ntable(subset_data$srmh)\n#> \n#>           Poor or Fair                   Good Very good or excellent \n#>                   1002                    885                      0\n```\n:::\n\n:::\n\n\\\nThat worked as intended. Now let's send the prompt to recode the variable as a binary factor.\n\n\\\n**Prompt Sent to Gemini:**\n\n::: {.callout-note title=\"User Prompt\"}\nRecode self-rated mental health variable and make it a binary variable: ‘Good’ vs. ‘Poor’ (simplifying category labels only). Convert that variable to a factor variable with ‘Poor’ being the reference level.\n:::\n\n\\\n**Gemini's response:**\n\n::: {.callout-tip title=\"Gemini Response\"}\nHere's the R code to recode the srmh variable in your subset_data into a binary factor variable with 'Good' and 'Poor' categories, setting 'Poor' as the reference level.\n\n\n::: {.cell hash='accessingE1vibep2_cache/html/unnamed-chunk-4_6224573499890cc6e0f7224cf3fdd68f'}\n\n```{.r .cell-code}\n# Recode the 'srmh' variable into a binary 'Good' vs. 'Poor' factor\nsubset_data <- subset_data %>%\n  mutate(\n    srmh_binary = car::recode(srmh,\n                              \"'Good' = 'Good';\n                               'Poor or Fair' = 'Poor'\"\n                              # Any other values (like NA from previous steps) would remain NA\n    ) %>%\n      factor(levels = c(\"Poor\", \"Good\")) # Set 'Poor' as the reference level\n  )\n\n# You can now check the levels and a table of the new binary variable\nlevels(subset_data$srmh_binary)\n#> [1] \"Poor\" \"Good\"\ntable(subset_data$srmh_binary, useNA = \"always\")\n#> \n#> Poor Good <NA> \n#> 1002  885    0\n```\n:::\n\n:::\n\n\\\nThat worked great. The self-rated mental health variable was correctly recoded into a binary factor with 'Poor' as the reference level. The code Gemini provided also included checks to confirm the recoding was done correctly\n\n------------------------------------------------------------------------\n\n\\\n\n### Exercise 3b: Reporting odds ratio\n\nFor this next exercise, we need to construct a logistic regression model to examine the relationship between community belonging and self-rated mental health among respondents with mental or substance use disorders. The model should be adjusted for three confounders: sex, age, and race/ethnicity.\n\nOnce the model is constructed, report the odds ratios and their associated confidence intervals. To do so we will use the `publish` package.\n\n\\\n**Prompt Sent to Gemini:**\n\n::: {.callout-note title=\"User Prompt\"}\nConstruct a logistic regression model to examine the relationship between community belonging (explanatory variable) and self-rated mental health (outcome variable) among respondents with mental or substance use disorders.\n\nAdjust the model for three confounders:\n\n-   Sex\n\n-   Age\n\n-   Race/ethnicity\n\nAfter fitting the model:\n\n-   Report the odds ratios and their 95% confidence intervals\n\n-   Use the publish package to present the results in a clear and interpretable format\n\n-   Provide the R code to complete this task\n:::\n\n\\\n**Gemini's response:**\n\n::: {.callout-tip title=\"Gemini Response\"}\n\n::: {.cell hash='accessingE1vibep2_cache/html/unnamed-chunk-5_02d495883d251c430e74d4058d531695'}\n\n```{.r .cell-code}\nmodel <- glm(srmh_binary ~ community + sex + age + race,\n             data = subset_data,\n             family = binomial(link = \"logit\"))\n\nresults_table <- publish(model, level = 0.95)\n#>   Variable             Units OddsRatio       CI.95    p-value \n#>  community         Very weak       Ref                        \n#>                Somewhat weak      1.93 [1.48;2.53]    < 1e-04 \n#>              Somewhat strong      2.90 [2.22;3.80]    < 1e-04 \n#>                  Very strong      3.32 [2.27;4.85]    < 1e-04 \n#>        sex           Females       Ref                        \n#>                        Males      1.32 [1.09;1.60]   0.003993 \n#>        age    15 to 24 years       Ref                        \n#>               25 to 34 years      0.85 [0.63;1.15]   0.292243 \n#>               35 to 44 years      0.45 [0.33;0.61]    < 1e-04 \n#>               45 to 54 years      0.45 [0.34;0.61]    < 1e-04 \n#>               55 to 64 years      0.41 [0.30;0.56]    < 1e-04 \n#>            65 years or older      0.87 [0.59;1.27]   0.468623 \n#>       race         Non-white       Ref                        \n#>                        White      1.32 [1.03;1.71]   0.030025\n\nprint(results_table)\n#>     Variable             Units OddsRatio       CI.95    p-value\n#> 1  community         Very weak       Ref                       \n#> 2                Somewhat weak      1.93 [1.48;2.53]    < 1e-04\n#> 3              Somewhat strong      2.90 [2.22;3.80]    < 1e-04\n#> 4                  Very strong      3.32 [2.27;4.85]    < 1e-04\n#> 5        sex           Females       Ref                       \n#> 6                        Males      1.32 [1.09;1.60]   0.003993\n#> 7        age    15 to 24 years       Ref                       \n#> 8               25 to 34 years      0.85 [0.63;1.15]   0.292243\n#> 9               35 to 44 years      0.45 [0.33;0.61]    < 1e-04\n#> 10              45 to 54 years      0.45 [0.34;0.61]    < 1e-04\n#> 11              55 to 64 years      0.41 [0.30;0.56]    < 1e-04\n#> 12           65 years or older      0.87 [0.59;1.27]   0.468623\n#> 13      race         Non-white       Ref                       \n#> 14                       White      1.32 [1.03;1.71]   0.030025\n```\n:::\n\n:::\n\nThat worked well. Gemini successfully built the logistic regression model, adjusted for the correct confounders, and presented the odds ratios with confidence intervals using the `publish` package. The code ran smoothly and the output was clear and interpretable.\n\n------------------------------------------------------------------------\n\n\\\n\n### Summary\n\nUsing Gemini, we were able to complete the second set of tasks. In all instances, Gemini was able to complete the tasks without error, including identifying the correct variables to use when creating the table one, when subsetting the data, and constructing the logistic regression model. It also was successful and printing the table and regression results in in a markdown friendly manner\n\nIn this set of exercises, Gemini again performed well and returned accurate results. Still, it’s important to approach each step with care. Even when outputs look correct, reviewing them closely ensures the work aligns with the intended analysis and avoids potential oversights.\n\n------------------------------------------------------------------------\n\n\\\n\n[**Step-by-Step Plan for Using Generative AI in Data Analysis**]{.underline}\n\n1.  **Be clear and specific**\\\n    Define the task directly and avoid vague instructions.\n\n2.  **Provide starter code or examples**\\\n    Help the model understand your expectations and structure.\n\n3.  **Include variable structure**\\\n    Share the output of `str()` or a data dictionary so the model knows variable types.\n\n4.  **State factor levels explicitly**\\\n    List how variables should be recoded or grouped rather than relying on inference.\n\n5.  **Reference sources directly**\\\n    If you're asking the model to replicate something (e.g., a published Table 1), summarize it clearly instead of assuming it can interpret the reference alone.\n\n6.  **Review the output**\\\n    Check that the generated code and results match your goals and are statistically valid.\n\n7.  **Be prepared to troubleshoot**\\\n    If the model's response is incomplete or incorrect, use your understanding and available documentation to fix it.\n\n8.  **Use AI as a guide, not a replacement**\\\n    Generative AI can streamline your work, but knowledge and software familiarity are still essential.\n\n9.  (**NEW**) **Double Check any work produced by AI**\\\n    While some AI models may perform well and produce exactly what you ask for, it’s still important to carry out thorough checks to ensure the output works as intended.\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}