{
  "hash": "5b441fcc786cebc4a79d46ba8f8eadbd",
  "result": {
    "engine": "knitr",
    "markdown": "## R basics {.unnumbered}\n\n```{=html}\n<!---\n::: callout-important\n**Show/hide code**:\n\nOn every page, at the top, you'll find a `</>` button. Click it to toggle the visibility of all R code on the page at once. Alternatively, you can click 'Show the code' within individual code chunks to view code on a case-by-case basis.\n:::\n--->\n```\n\n\n\n### Start using R\n\nTo get started with R, follow these steps:\n\n-   Download and Install R: Grab the newest version from the official [R website](https://www.r-project.org/). \\> *Tip: Download from a Comprehensive R Archive Network (CRAN) server near your geographic location.*\n\n-   Download and Install RStudio: You can get it from [this link](https://posit.co/download/rstudio-desktop/). \\> *Note: RStudio serves as an Integrated Development Environment (IDE) offering a user-friendly interface. It facilitates operations such as executing R commands, preserving scripts, inspecting results, managing data, and more.*\n\n-   Begin with RStudio: Once you open RStudio, delve into using R. For starters, employ the R syntax for script preservation, allowing future code adjustments and additions.\n\n### Basic syntax\n\n::: callout-tip\nR, a versatile programming language for statistics and data analysis, can execute numerous tasks. Let's break down some of the fundamental aspects of R's syntax.\n:::\n\n1.  Using R as a Calculator\n\nSimilar to how you'd use a traditional calculator for basic arithmetic operations, R can perform these functions with ease. For instance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simple arithmetic\n1 + 1\n#> [1] 2\n```\n:::\n\n\nThis is a basic addition, resulting in 2.\n\nA more intricate calculation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complex calculation involving \n# multiplication, subtraction, division, powers, and square root\n20 * 5 - 10 * (3/4) * (2^3) + sqrt(25)\n#> [1] 45\n```\n:::\n\n\nThis demonstrates R's capability to handle complex arithmetic operations.\n\n2.  Variable Assignment in R\n\nR allows you to store values in variables, acting like labeled containers that can be recalled and manipulated later. For example,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assigning a value of 2 to variable x1\nx1 <- 2\nprint(x1)\n#> [1] 2\n```\n:::\n\n\nSimilarly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx2 <- 9\nx2\n#> [1] 9\n```\n:::\n\n\n3.  Creating New Variables Using Existing Ones\n\nYou can combine and manipulate previously assigned variables to create new ones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using variable x1 \n# to compute its square and assign to y1\ny1 <- x1^2\ny1\n#> [1] 4\n```\n:::\n\n\nYou can also use multiple variables in a single expression:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny2 <- 310 - x1 + 2*x2 - 5*y1^3\ny2\n#> [1] 6\n```\n:::\n\n\n4.  Creating Functions\n\nFunctions act as reusable blocks of code. Once defined, they can be called multiple times with different arguments. Here's how to define a function that squares a number:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- function(x) {x^2}\n```\n:::\n\n\nCall the function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz(x = 0.5)\n#> [1] 0.25\nz(x = 2)\n#> [1] 4\n```\n:::\n\n\nR also comes with a plethora of built-in functions. Examples include `exp` (exponential function) and `rnorm` (random number generation from a normal distribution).\n\n5.  Utilizing Built-In Functions\n\nFor instance, using the exponential function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calling functions\nexp(x1)\n#> [1] 7.389056\nlog(exp(x1))\n#> [1] 2\n```\n:::\n\n\nThe `rnorm` function can generate random samples from a normal distribution: below we are generating 10 random sampling from the normal distribution with mean 0 and standard deviation 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(n = 10, mean = 0, sd = 1)\n#>  [1]  0.09548954 -0.15380317 -0.78119328  0.92746313 -2.14464859 -0.65474698\n#>  [7] -0.28007179 -0.85171595 -1.18924278 -0.17224185\n```\n:::\n\n\nAs random number generation relies on algorithms, results will differ with each execution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Random sampling (again)\nrnorm(n = 10, mean = 0, sd = 1)\n#>  [1] -0.2861384  0.9275671 -1.5442804  1.8067612 -0.6306749 -0.1746498\n#>  [7]  0.8449699 -0.3598907  0.4424825  0.7613802\n```\n:::\n\n\nHowever, by setting a `seed`, we can reproduce identical random results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Random sampling (again, but with a seed)\nset.seed(11)\nrnorm(n = 10, mean = 0, sd = 1)\n#>  [1] -0.59103110  0.02659437 -1.51655310 -1.36265335  1.17848916 -0.93415132\n#>  [7]  1.32360565  0.62491779 -0.04572296 -1.00412058\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# random sampling (reproducing the same numbers)\nset.seed(11)\nrnorm(n = 10, mean = 0, sd = 1)\n#>  [1] -0.59103110  0.02659437 -1.51655310 -1.36265335  1.17848916 -0.93415132\n#>  [7]  1.32360565  0.62491779 -0.04572296 -1.00412058\n```\n:::\n\n\nAs we can see, when we set the same seed, we get exactly the same random number. This is very important for reproducing the same results. There are many other pre-existing functions in R.\n\n6.  Seeking Help in R\n\n::: callout-tip\nR's help function, invoked with `?function_name`, provides detailed documentation on functions, assisting users with unclear or forgotten arguments:\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Searching for help if you know \n# the exact name of the function with a question mark\n?curve\n```\n:::\n\n\nBelow is an example of using the pre-exiting function for plotting a curve ranging from -10 to 10.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plotting a function\ncurve(z, from = -10, to = 10, xlab = \"x\", ylab = \"Squared x\")\n```\n\n::: {.cell-output-display}\n![](wrangling1a_files/figure-html/curve-1.png){width=672}\n:::\n:::\n\n\nIf some of the arguments are difficult to remember or what else could be done with that function, we could use the `help` function. For example, we can simply type `help(curve)` or `?curve` to get help on the `curve` function:\n\n::: callout-tip\nIf you're uncertain about a function's precise name, two question marks can assist in the search:\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Searching for help if don't know \n# the exact name of the function\n??boxplot\n```\n:::\n\n\n7.  Creating Vectors\n\nVectors are sequences of data elements of the same basic type. Here are some methods to create them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating vectors in different ways\nx3 <- c(1, 2, 3, 4, 5)\nprint(x3)\n#> [1] 1 2 3 4 5\n\nx4 <- 1:7\nprint(x4)\n#> [1] 1 2 3 4 5 6 7\n\nx5 <- seq(from = 0, to = 100, by = 10)\nprint(x5)\n#>  [1]   0  10  20  30  40  50  60  70  80  90 100\n\nx6 <- seq(10, 30, length = 7)\nx6\n#> [1] 10.00000 13.33333 16.66667 20.00000 23.33333 26.66667 30.00000\n```\n:::\n\n\n8.  Plotting in R\n\nR provides numerous plotting capabilities. For instance, the plot function can create scatter plots and line graphs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot\nplot(x5, type = \"p\", main = \"Scatter plot\")\n```\n\n::: {.cell-output-display}\n![](wrangling1a_files/figure-html/plot2-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Line graph\nplot(x = x6, y = x6^2, type = \"l\", main = \"Line graph\")\n```\n\n::: {.cell-output-display}\n![](wrangling1a_files/figure-html/plot3-1.png){width=672}\n:::\n:::\n\n\n9.  Character Vectors Apart from numeric values, R also allows for character vectors. For example, we can create a `sex` variable coded as females, males and other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Character vector\nsex <- c(\"females\", \"males\", \"other\")\nsex\n#> [1] \"females\" \"males\"   \"other\"\n```\n:::\n\n\nTo determine a variable's type, use the mode function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check data type\nmode(sex)\n#> [1] \"character\"\n```\n:::\n\n\n### Package Management\n\nPackages in R are collections of functions and datasets developed by the community. They enhance the capability of R by adding new functions for data analysis, visualization, data import, and more. Understanding how to install and load packages is essential for effective R programming.\n\n1.  Installing Packages from CRAN\n\nThe CRAN is a major source of R packages. You can install them directly from within R using the `install.packages()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Installing the 'ggplot2' package\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\n2.  Loading a Package\n\nAfter a package is installed, it must be loaded to use its functions. This is done with the `library()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loading the 'ggplot2' package\nlibrary(ggplot2)\n```\n:::\n\n\nYou only need to install a package once, but you'll need to load it every time you start a new R session and want to use its functions.\n\n3.  Updating Packages\n\nR packages are frequently updated. To ensure you have the latest version of a package, use the `update.packages()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Updating all installed packages\n# could be time consuming!\nupdate.packages(ask = FALSE)  \n# 'ask = FALSE' updates all without asking for confirmation\n```\n:::\n\n\n4.  Listing Installed Packages\n\nYou can view all the installed packages on your R setup using the installed.packages() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Listing installed packages\ninstalled.packages()[, \"Package\"]\n```\n:::\n\n\n5.  Removing a Package\n\nIf you no longer need a package, it can be removed using the `remove.packages()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Removing the 'ggplot2' package\nremove.packages(\"ggplot2\")\n```\n:::\n\n\n6.  Installing Packages from Other Sources\n\nWhile CRAN is the primary source, sometimes you might need to install packages from GitHub or other repositories. The `devtools` package provides a function for this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Installing devtools first\ninstall.packages(\"devtools\")\n# Loading devtools\nlibrary(devtools)\n# Install a package from GitHub\n# https://github.com/ehsanx/simMSM\ninstall_github(\"ehsanx/simMSM\")\n```\n:::\n\n\nWhen you are working on a project, it's a good practice to list and install required packages at the beginning of your R script.\n\n### Video content (optional)\n\n::: callout-tip\nFor those who prefer a video walkthrough, feel free to watch the video below, which offers a description of an earlier version of the above content.\n:::\n\n::: {style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"}\n<iframe src=\"https://www.youtube.com/embed/wMwH7iroGIo\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen>\n\n</iframe>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}