{
  "hash": "004fe2491ebc8c70a5057bfa28175928",
  "result": {
    "markdown": "## Mediation Example {.unnumbered}\n\n\n::: {.cell hash='mediation3_cache/html/setup_47c4f2dcdb655207116902fe201a35c3'}\n\n```{.r .cell-code}\n# Load required packages\nknitr::opts_chunk$set(echo = TRUE)\nrequire(survey)\nrequire(DiagrammeR)\nrequire(DiagrammeRsvg)\nrequire(rsvg)\nlibrary(magrittr)\nlibrary(svglite)\nlibrary(png)\nrequire(Publish)\n```\n:::\n\n\nWe want to decompose of the \"total effect\" of a given exposure OA ($A$) on the outcome CVD ($Y$) into\n\n-   a natural direct effect (NDE; $A \\rightarrow Y$) and\n-   a natural indirect effect (NIE) through a mediator pain medication ($M$) through ($A \\rightarrow M \\rightarrow Y$).\n\n### Step 0: Build data first\n\n\n::: {.cell hash='mediation3_cache/html/loading_f4fd5078e7f9896520d4022359f2c269'}\n\n```{.r .cell-code}\nload(\"Data/mediation/cchs123pain.RData\")\nsource(\"Data/mediation/medFunc.R\")\nls()\n#> [1] \"analytic.cc\"        \"analytic.miss\"      \"doEffectDecomp\"    \n#> [4] \"doEffectDecomp.int\"\n\nvarlist <- c(\"age\", \"sex\", \"income\", \"race\", \"bmi\", \"edu\", \"phyact\", \"smoke\", \"fruit\", \"diab\")\nanalytic.miss$mediator <- ifelse(analytic.miss$painmed == \"Yes\", 1, 0)\nanalytic.miss$exposure <- ifelse(analytic.miss$OA == \"OA\", 1, 0)\nanalytic.miss$outcome <- ifelse(analytic.miss$CVD == \"event\", 1, 0)\n```\n:::\n\n\n### Pre-run step 3 model\n\nWe will utilize this fit in step 3\n\n\n::: {.cell hash='mediation3_cache/html/mediatormodel_39a490095d2527528f2d149e7b7803c2'}\n\n```{.r .cell-code}\n# A = actual exposure (without any change)\nanalytic.miss$exposureTemp <- analytic.miss$exposure\n\n# Design\nw.design0 <- svydesign(id=~1, weights=~weight, data=analytic.miss)\nw.design <- subset(w.design0, miss == 0)\n\n# Replace exposure with exposureTemp. This will be necessary in step 3\nfit.m <- svyglm(mediator ~ exposureTemp + \n                 age + sex + income + race + bmi + edu + phyact + smoke + fruit + diab,\n                design = w.design, family = binomial(\"logit\"))\n#> Warning in eval(family$initialize): non-integer #successes in a binomial glm!\npublish(fit.m)\n#>      Variable             Units OddsRatio       CI.95     p-value \n#>  exposureTemp                        2.43 [2.06;2.86]     < 1e-04 \n#>           age       20-29 years       Ref                         \n#>                     30-39 years      1.00 [0.88;1.13]   0.9442989 \n#>                     40-49 years      0.93 [0.82;1.06]   0.2651302 \n#>                     50-59 years      0.66 [0.58;0.76]     < 1e-04 \n#>                     60-64 years      0.61 [0.51;0.72]     < 1e-04 \n#>               65 years and over      0.61 [0.52;0.71]     < 1e-04 \n#>           sex            Female       Ref                         \n#>                            Male      0.50 [0.46;0.55]     < 1e-04 \n#>        income   $29,999 or less       Ref                         \n#>                 $30,000-$49,999      1.20 [1.06;1.35]   0.0043533 \n#>                 $50,000-$79,999      1.21 [1.08;1.37]   0.0014914 \n#>                 $80,000 or more      1.28 [1.14;1.45]     < 1e-04 \n#>          race         Non-white       Ref                         \n#>                           White      1.81 [1.62;2.02]     < 1e-04 \n#>           bmi       Underweight       Ref                         \n#>                  healthy weight      1.09 [0.82;1.44]   0.5631582 \n#>                      Overweight      1.33 [1.01;1.77]   0.0449616 \n#>           edu          < 2ndary       Ref                         \n#>                       2nd grad.      1.13 [0.98;1.30]   0.1014986 \n#>                 Other 2nd grad.      1.30 [1.08;1.55]   0.0050596 \n#>                  Post-2nd grad.      1.25 [1.10;1.42]   0.0008252 \n#>        phyact            Active       Ref                         \n#>                        Inactive      1.12 [1.02;1.23]   0.0184447 \n#>                        Moderate      1.12 [1.01;1.25]   0.0364592 \n#>         smoke      Never smoker       Ref                         \n#>                  Current smoker      1.29 [1.16;1.44]     < 1e-04 \n#>                   Former smoker      1.28 [1.17;1.40]     < 1e-04 \n#>         fruit 0-3 daily serving       Ref                         \n#>               4-6 daily serving      0.92 [0.83;1.02]   0.0976967 \n#>                6+ daily serving      0.80 [0.71;0.90]   0.0001979 \n#>          diab                No       Ref                         \n#>                             Yes      1.23 [0.99;1.52]   0.0626501\n```\n:::\n\n\n### Step 1 and 2: Replicate data with different exposures\n\nWe manipulate and duplicate data here\n\n\n::: {.cell hash='mediation3_cache/html/duplicate_d98f3da6bf31769994c516b907816462'}\n\n```{.r .cell-code}\ndim(analytic.miss)\n#> [1] 397173     28\ndim(analytic.cc)\n#> [1] 28734    23\nnrow(analytic.miss) - nrow(analytic.cc)\n#> [1] 368439\n\n# Create counterfactual data. This will be necessary in step 3\nd1 <- d2 <- analytic.miss\n\n# Exposed = Exposed\nd1$exposure.counterfactual <- d1$exposure\n\n# Exposed = Not exposed\nd2$exposure.counterfactual <- !d2$exposure \n\n# duplicated data (double the amount)\nnewd <- rbind(d1, d2)\nnewd <- newd[order(newd$ID), ]\ndim(newd)\n#> [1] 794346     29\n```\n:::\n\n\n### Step 3: Compute weights for the mediation\n\nWeight is computed by\n\n$W^{M|C} = \\frac{P(M|A^*, C)}{P(M|A, C)}$\n\nin all data `newd` (fact `d1` + alternative fact `d2`).\n\n-   $P(M|A, C)$ is computed from a logistic regression of $M$ on $A$ + $C$.\n    -   $logit [P(M=1 | C = c]) = \\beta_0 + \\beta_1 a + \\beta_3 c$\n-   $P(M|A^{*}, C)$ is computed from a logistic regression of $M$ on $A^*$ + $C$.\n    -   $logit [P(M=1 | C = c]) = \\beta_0 + \\beta'_1 a^* + \\beta'_3 c$\n\n\n::: {.cell hash='mediation3_cache/html/weight_f5ee72f7299de198e2a76f07a57e910c'}\n\n```{.r .cell-code}\n# First, use original exposure (all A + all A):\n# A = actual exposure (without any change)\n# A = exposure\nnewd$exposureTemp <- newd$exposure\n\n# Probability of M given A + C\nw <- predict(fit.m, newdata=newd, type='response') \ndirect <- ifelse(newd$mediator, w, 1-w)\n\n# Second, use counterfactual exposures (all A + all !A):\n# A* = Opposite (counterfactual) values of the exposure\n# A* = exposure.counterfactual\nnewd$exposureTemp <- newd$exposure.counterfactual\n\n# Probability of M given A* + C\nw <- predict(fit.m, newdata=newd, type='response') \nindirect <- ifelse(newd$mediator, w, 1-w)\n\n# Mediator weights\nnewd$W.mediator <- indirect/direct\nsummary(newd$W.mediator)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n#>     0.4     1.0     1.0     1.0     1.2     2.2  670758\nhist(newd$W.mediator)\n```\n\n::: {.cell-output-display}\n![](mediation3_files/figure-html/weight-1.png){width=672}\n:::\n:::\n\n\nIncorporating the survey weights:\n\nNote: scaling can often be helpful if there exists extreme weights.\n\n\n::: {.cell hash='mediation3_cache/html/outcomeW_c900aa447a647730c1a03a62260d4b46'}\n\n```{.r .cell-code}\n# scale survey weights\n#newd$S.w <- with(newd,(weight)/mean(weight))\nnewd$S.w <- with(newd,weight)\nnewd$S.w[is.na(newd$S.w)]\n#> numeric(0)\nsummary(newd$S.w)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>    0.39   21.76   42.21   66.70   81.07 2384.98\n\n# Multiply mediator weights with scaled survey weights\nnewd$SM.w <- with(newd,(W.mediator * S.w))\n\nsummary(newd$SM.w)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n#>     0.4    24.7    46.4    73.9    88.8  3531.6  670758\ntable(newd$miss[is.na(newd$SM.w)])\n#> \n#>      1 \n#> 670758\nnewd$SM.w[is.na(newd$SM.w)] <- 0\nsummary(newd$SM.w)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>     0.0     0.0     0.0    11.5     0.0  3531.6\n\nhist(newd$SM.w, main = \"\", xlab = \"Combined weights\", \n     ylab = \"Frequency\", freq = TRUE)\n```\n\n::: {.cell-output-display}\n![](mediation3_files/figure-html/outcomeW-1.png){width=672}\n:::\n:::\n\n\nHere all missing weights are associated with incomplete cases (`miss==1`)! Hence, doesn't matter if they are missing or other value (0) in them.\n\n### Step 4: Weighted outcome Model\n\nOutcome model is\n\n$logit [P(Y_{a,M(a^*)}=1 | C = c)] = \\theta_0 + \\theta_1 a + \\theta_2 a^* + \\theta_3 c$\n\nafter weighting (combination of mediator weight + sampling weight).\n\n\n::: {.cell hash='mediation3_cache/html/outcome_bf758cff3e69870715670c6bb6579b7c'}\n\n```{.r .cell-code}\n# Outcome analysis\nw.design0 <- svydesign(id=~1, weights=~SM.w, data=newd)\nw.design <- subset(w.design0, miss == 0)\n\n# Fit Y on (A + A* + C)\nfit <- svyglm(outcome ~ exposure + exposure.counterfactual + \n                age + sex + income + race + bmi + edu + phyact + smoke + fruit + diab, \n             design = w.design, family = binomial(\"logit\"))\n#> Warning in eval(family$initialize): non-integer #successes in a binomial glm!\n```\n:::\n\n\n#### Point estimates\n\nFollowing are the conditional ORs:\n\n-   $OR_{TE}(C=c) = \\exp(\\theta_1 + \\theta_2)$\n-   $OR_{NDE}(A=1,M=0,C=c) = \\exp(\\theta_1)$\n-   $OR_{NIE}(A^{*}=1,M=0,C=c) = \\exp(\\theta_2)$\n\n\n::: {.cell hash='mediation3_cache/html/outcomeextract_fd1ee701b326526d5641c8513982bb9f'}\n\n```{.r .cell-code}\n# total effect of A-> Y + A -> M -> Y\nTE <- exp(sum(coef(fit)[c('exposure', 'exposure.counterfactual')])) \nTE \n#> [1] 1.544694\n\n# direct effect of A-> Y (not through M)\nDE <- exp(unname(coef(fit)['exposure']))\nDE \n#> [1] 1.488554\n\n# indirect effect of A-> Y (A -> M -> Y)\nIE <- exp(unname(coef(fit)[c('exposure.counterfactual')])) \nIE \n#> [1] 1.037714\n\n# Product of ORs; same as TE \nDE * IE \n#> [1] 1.544694\n\n# Proportion mediated\nPM <- log(IE) / log(TE)\nPM \n#> [1] 0.08513902\n```\n:::\n\n\n#### Obtaining results fast\n\nUser-written function `doEffectDecomp()` (specific to OA-CVD problem):\n\n\n::: {.cell hash='mediation3_cache/html/fastfnc_8631a9cae4614fb57a4f5990ae5befcc'}\n\n```{.r .cell-code}\ndoEffectDecomp(analytic.miss, ind = NULL, varlist = varlist)\n#>         TE         DE         IE         PM \n#> 1.54469393 1.48855395 1.03771444 0.08513902\n# function is provided in the appendix\n```\n:::\n\n\n#### Confidence intervals\n\nStandard errors and confidence intervals are determined by bootstrap methods.\n\n\n::: {.cell hash='mediation3_cache/html/boot_45b3365e77e3ddd3072ee1a20b456a09'}\n\n```{.r .cell-code}\nrequire(boot)\n#> Loading required package: boot\n#> \n#> Attaching package: 'boot'\n#> The following object is masked from 'package:survival':\n#> \n#>     aml\n# I ran the computation on a 24 core computer,\n# hence set ncpus = 5 (keep some free). \n# If you have more / less cores, adjust accordingly. \n# Try parallel package to find how many cores you have.\n# library(parallel)\n# detectCores()\n# doEffectDecomp is a user-written function\n# See appendix for the function\nset.seed(504)\nbootresBin <- boot(data=analytic.miss, statistic=doEffectDecomp, \n                R = 5, parallel = \"multicore\", ncpus=5,\n                varlist = varlist)\n```\n:::\n\n\nR = 5 is not reliable for bootstrap. In real applications, try 250 at least.\n\n\n::: {.cell hash='mediation3_cache/html/bootresX_885963f60cb25a51ab25c832a66a702d'}\n\n```{.r .cell-code}\nbootci1b <- boot.ci(bootresBin,type = \"perc\",index=1)\n#> Warning in norm.inter(t, alpha): extreme order statistics used as endpoints\nbootci2b <- boot.ci(bootresBin,type = \"perc\",index=2)\n#> Warning in norm.inter(t, alpha): extreme order statistics used as endpoints\nbootci3b <- boot.ci(bootresBin,type = \"perc\",index=3)\n#> Warning in norm.inter(t, alpha): extreme order statistics used as endpoints\nbootci4b <- boot.ci(bootresBin,type = \"perc\",index=4)\n#> Warning in norm.inter(t, alpha): extreme order statistics used as endpoints\n```\n:::\n\n::: {.cell hash='mediation3_cache/html/bootres_14c08623983b66a4b3886c83a6d11e4d'}\n\n```{.r .cell-code}\n# Number of bootstraps\nbootresBin$R\n#> [1] 5\n\n# Total Effect\nc(bootresBin$t0[1], bootci1b$percent[4:5])\n#>       TE                   \n#> 1.544694 1.293208 1.894417\n\n# Direct Effect\nc(bootresBin$t0[2], bootci2b$percent[4:5])\n#>       DE                   \n#> 1.488554 1.303554 1.876916\n\n# Indirect Effect\nc(bootresBin$t0[3], bootci3b$percent[4:5])\n#>        IE                     \n#> 1.0377144 0.9738072 1.0093246\n\n# Proportion Mediated\nc(bootresBin$t0[4], bootci4b$percent[4:5])\n#>          PM                         \n#>  0.08513902 -0.08360848  0.01655013\n```\n:::\n\n\nThe proportion mediated through pain medication was about 8.51% on the log odds ratio scale.\n\n#### Visualization for main effects\n\n\n::: {.cell hash='mediation3_cache/html/plotxy_80f67b03ce2fde5fe385b92233eee28b'}\n\n```{.r .cell-code}\nrequire(plotrix)\n#> Loading required package: plotrix\nTEc <- c(bootresBin$t0[1], bootci1b$percent[4:5])\nDEc <- c(bootresBin$t0[2], bootci2b$percent[4:5])\nIEc <- c(bootresBin$t0[3], bootci3b$percent[4:5])\nmat <- rbind(TEc,DEc,IEc)\ncolnames(mat) <- c(\"Point\", \"2.5%\", \"97.5%\")\nmat\n#>        Point      2.5%    97.5%\n#> TEc 1.544694 1.2932078 1.894417\n#> DEc 1.488554 1.3035540 1.876916\n#> IEc 1.037714 0.9738072 1.009325\n\nplotCI(1:3, mat[,1], ui=mat[,3], li=mat[,2], xlab = \"Estimates\", ylab = \"\", xaxt=\"n\")\naxis(1, at=1:3,labels=c(\"TE\",\"NDE\",\"NIE\"))\nabline(h=1, lty = 2)\n```\n\n::: {.cell-output-display}\n![](mediation3_files/figure-html/plotxy-1.png){width=672}\n:::\n:::\n\n\n#### Non-linearity\n\nConsider\n\n-   non-linear relationships (polynomials) and interactions between exposure, demographic/baseline covariates and mediators,\n-   Is misclassification of the mediators possible?\n\nHere we are again using a user-written function `doEffectDecomp.int()` (including interaction `phyact*diab` in the mediation model as well as the outcome model):\n\n\n::: {.cell hash='mediation3_cache/html/fast_0aab16e518b4e7b3ad254e3bd8a2dd31'}\n\n```{.r .cell-code}\n# doEffectDecomp.int is a user-written function\n# See appendix for the function\ndoEffectDecomp.int(analytic.miss, ind = NULL, varlist = varlist)\n#>         TE         DE         IE         PM \n#> 1.54472021 1.48868864 1.03763821 0.08496674\n# try bootstrap on it?\n```\n:::\n\n\n#### Visualization for main + interactions\n\n\n::: {.cell hash='mediation3_cache/html/test3_82ba66d7f70ab621ebf86f623b4201f8'}\n\n```{.r .cell-code}\nset.seed(504)\nbootresInt <- boot(data=analytic.miss, statistic=doEffectDecomp.int,\n                R = 5, parallel = \"multicore\", ncpus=5,\n                varlist = varlist)\n```\n:::\n\n\nR = 5 is not reliable for bootstrap. In real applications, try 250 at least.\n\n\n::: {.cell hash='mediation3_cache/html/test3X_8296a44acf57e37289b4613c9df06e97'}\n\n```{.r .cell-code}\nbootci1i <- boot.ci(bootresInt,type = \"perc\",index=1)\n#> Warning in norm.inter(t, alpha): extreme order statistics used as endpoints\nbootci2i <- boot.ci(bootresInt,type = \"perc\",index=2)\n#> Warning in norm.inter(t, alpha): extreme order statistics used as endpoints\nbootci3i <- boot.ci(bootresInt,type = \"perc\",index=3)\n#> Warning in norm.inter(t, alpha): extreme order statistics used as endpoints\nbootci4i <- boot.ci(bootresInt,type = \"perc\",index=4)\n#> Warning in norm.inter(t, alpha): extreme order statistics used as endpoints\n```\n:::\n\n::: {.cell hash='mediation3_cache/html/plotxyint_c2e1d2d1fa3c23fa59d5abc03aac5d47'}\n\n```{.r .cell-code}\nbootresInt$R\n#> [1] 5\n# from saved boostrap results: bootresInt \n# (similar as before)\nTEc <- c(bootresInt$t0[1], bootci1i$percent[4:5])\nDEc <- c(bootresInt$t0[2], bootci2i$percent[4:5])\nIEc <- c(bootresInt$t0[3], bootci3i$percent[4:5])\nmat<- rbind(TEc,DEc,IEc)\ncolnames(mat) <- c(\"Point\", \"2.5%\", \"97.5%\")\nmat\n#>        Point      2.5%    97.5%\n#> TEc 1.544720 1.2931358 1.893575\n#> DEc 1.488689 1.3040953 1.876521\n#> IEc 1.037638 0.9742042 1.009088\nplotCI(1:3, mat[,1], ui=mat[,3], li=mat[,2],\n       xlab = \"Estimates\", ylab = \"\", xaxt=\"n\")\naxis(1, at=1:3,labels=c(\"TE\",\"NDE\",\"NIE\"))\nabline(h=1, lty = 2)\n```\n\n::: {.cell-output-display}\n![](mediation3_files/figure-html/plotxyint-1.png){width=672}\n:::\n:::\n\n\n### Appendix: OA-CVD Functions for bootstrap\n\nThese functions are written basically for performing bootstrap for the OA-CVD analysis. However, changing the covariates names/model-specifications should not be too hard, once you understand the basic steps.\n\n\n::: {.cell hash='mediation3_cache/html/2fnc_049d1458076ed8f8c1f3295aaa5c99fb'}\n\n```{.r .cell-code}\n# without interactions (binary mediator)\ndoEffectDecomp\n#> function (dat, ind = NULL, varlist) \n#> {\n#>     if (is.null(ind)) \n#>         ind <- 1:nrow(dat)\n#>     d <- dat[ind, ]\n#>     d$mediator <- ifelse(as.character(d$painmed) == \"Yes\", 1, \n#>         0)\n#>     d$exposure <- ifelse(as.character(d$OA) == \"OA\", 1, 0)\n#>     d$outcome <- ifelse(as.character(d$CVD) == \"event\", 1, 0)\n#>     d$exposureTemp <- d$exposure\n#>     w.design0 <- svydesign(id = ~1, weights = ~weight, data = d)\n#>     w.design <- subset(w.design0, miss == 0)\n#>     fit.m <- svyglm(as.formula(paste0(paste0(\"mediator ~ exposureTemp  + \"), \n#>         paste0(varlist, collapse = \"+\"))), design = w.design, \n#>         family = quasibinomial(\"logit\"))\n#>     d1 <- d2 <- d\n#>     d1$exposure.counterfactual <- d1$exposure\n#>     d2$exposure.counterfactual <- !d2$exposure\n#>     newd <- rbind(d1, d2)\n#>     newd <- newd[order(newd$ID), ]\n#>     newd$exposureTemp <- newd$exposure\n#>     w <- predict(fit.m, newdata = newd, type = \"response\")\n#>     direct <- ifelse(newd$mediator, w, 1 - w)\n#>     newd$exposureTemp <- newd$exposure.counterfactual\n#>     w <- predict(fit.m, newdata = newd, type = \"response\")\n#>     indirect <- ifelse(newd$mediator, w, 1 - w)\n#>     newd$W.mediator <- indirect/direct\n#>     summary(newd$W.mediator)\n#>     newd$S.w <- with(newd, weight)\n#>     summary(newd$S.w)\n#>     newd$SM.w <- with(newd, (W.mediator * S.w))\n#>     newd$SM.w[is.na(newd$SM.w)] <- 0\n#>     summary(newd$SM.w)\n#>     w.design0 <- svydesign(id = ~1, weights = ~SM.w, data = newd)\n#>     w.design <- subset(w.design0, miss == 0)\n#>     fit <- svyglm(as.formula(paste0(paste0(\"outcome ~ exposure + exposure.counterfactual +\"), \n#>         paste0(varlist, collapse = \"+\"))), design = w.design, \n#>         family = quasibinomial(\"logit\"))\n#>     TE <- exp(sum(coef(fit)[c(\"exposure\", \"exposure.counterfactual\")]))\n#>     DE <- exp(unname(coef(fit)[\"exposure\"]))\n#>     IE <- exp(unname(coef(fit)[c(\"exposure.counterfactual\")]))\n#>     PM <- log(IE)/log(TE)\n#>     return(c(TE = TE, DE = DE, IE = IE, PM = PM))\n#> }\n#> <bytecode: 0x000001e07deabd58>\n\n# with interactions (binary mediator)\ndoEffectDecomp.int\n#> function (dat, ind = NULL, varlist) \n#> {\n#>     if (is.null(ind)) \n#>         ind <- 1:nrow(dat)\n#>     d <- dat[ind, ]\n#>     d$exposureTemp <- d$exposure\n#>     w.design0 <- svydesign(id = ~1, weights = ~weight, data = d)\n#>     w.design <- subset(w.design0, miss == 0)\n#>     fit.m <- svyglm(as.formula(paste0(paste0(\"mediator ~ exposureTemp + phyact*diab +\"), \n#>         paste0(varlist, collapse = \"+\"))), design = w.design, \n#>         family = quasibinomial(\"logit\"))\n#>     d1 <- d2 <- d\n#>     d1$exposure.counterfactual <- d1$exposure\n#>     d2$exposure.counterfactual <- !d2$exposure\n#>     newd <- rbind(d1, d2)\n#>     newd <- newd[order(newd$ID), ]\n#>     newd$exposureTemp <- newd$exposure\n#>     w <- predict(fit.m, newdata = newd, type = \"response\")\n#>     direct <- ifelse(newd$mediator, w, 1 - w)\n#>     newd$exposureTemp <- newd$exposure.counterfactual\n#>     w <- predict(fit.m, newdata = newd, type = \"response\")\n#>     indirect <- ifelse(newd$mediator, w, 1 - w)\n#>     newd$W.mediator <- indirect/direct\n#>     summary(newd$W.mediator)\n#>     newd$S.w <- with(newd, weight)\n#>     summary(newd$S.w)\n#>     newd$SM.w <- with(newd, (W.mediator * S.w))\n#>     newd$SM.w[is.na(newd$SM.w)] <- 0\n#>     summary(newd$SM.w)\n#>     w.design0 <- svydesign(id = ~1, weights = ~SM.w, data = newd)\n#>     w.design <- subset(w.design0, miss == 0)\n#>     fit <- svyglm(as.formula(paste0(paste0(\"outcome ~ exposure + exposure.counterfactual +\"), \n#>         paste0(varlist, collapse = \"+\"))), design = w.design, \n#>         family = quasibinomial(\"logit\"))\n#>     TE <- exp(sum(coef(fit)[c(\"exposure\", \"exposure.counterfactual\")]))\n#>     DE <- exp(unname(coef(fit)[\"exposure\"]))\n#>     IE <- exp(unname(coef(fit)[c(\"exposure.counterfactual\")]))\n#>     PM <- log(IE)/log(TE)\n#>     return(c(TE = TE, DE = DE, IE = IE, PM = PM))\n#> }\n#> <bytecode: 0x000001e0fba04660>\n```\n:::\n\n\n### Video content (optional)\n\n::: callout-tip\nFor those who prefer a video walkthrough, feel free to watch the video below, which offers a description of an earlier version of the above content.\n:::\n\n::: {style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"}\n<iframe src=\"https://www.youtube.com/embed/SdFmiXLcpHw\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen>\n\n</iframe>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}