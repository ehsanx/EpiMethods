## Updating Repository Contents from RStudio {.unnumbered}

This section outlines how to update the contents of a cloned GitHub repository using RStudio. It also introduces key Git commands and common workflows for version control and collaboration.

### Example Git Workflow in RStudio

Git is used through a series of commands. The most commonly used are:

-   **pull**: Retrieves the most recent version of the repository, ensuring all local files are up to date.

> Always begin your session by pulling changes to prevent conflicts. See [this video](https://www.youtube.com/watch?v=lgs54ENxPW8) for guidance on resolving merge issues.

-   **commit**: Records a snapshot of changes made to local files.

> Write clear, concise commit messages to help collaborators understand the purpose of each change.

-   **push**: Uploads committed changes to the remote repository on GitHub.

> Conflicts may arise if changes contradict those already made in the repository. See [this video](https://www.youtube.com/watch?v=lgs54ENxPW8) for resolving conflicts in RStudio.

Additional Git commands and advanced options are available in the [Git documentation](https://git-scm.com/docs).

### Requirements and Necessary Software

-   A [GitHub account](https://github.com/)
-   R and RStudio ([refer to previous chapter](wrangling1a.html))
-   [GitHub Desktop](https://desktop.github.com/)

### Example: Modify a Test Repository

1.  Clone the repository and locate the Git tab in RStudio.

    ![](Images/reporting/workflow_setup.png)

2.  Pull the latest version of the repository.

    ![](Images/reporting/workflow_upt_to_date.png)

3.  Edit the README file and commit changes.

    ![](Images/reporting/workflow_create_changes.png)\
    ![](Images/reporting/workflow_view_changes.png)\
    <!---![](images/clipboard-1334889528.png)--->

-   Stage the modified files, ensure you are working on the `main` branch, and add a descriptive commit message.

    ![](Images/reporting/workflow_commit_message.png)

-   Confirm the commit.

    ![](Images/reporting/workflow_commit_confirm.png)

4.  Push the committed changes to GitHub.

    ![](Images/reporting/workflow_ahead_of_branch.png)\
    ![](Images/reporting/workflow_push_message.png)

5.  Verify the changes on the GitHub repository page.

    ![](Images/reporting/workflow_updated_on_GitHub.png)

### Bookdown Template in RStudio

-   Go to **File** \> **New Project** \> **New Directory** \> **Book Project using bookdown**
-   Name your project (e.g., `"test1"`)
-   Copy project files to your main repository folder
-   Rename the project file as appropriate (e.g., `"template"`)

### Compiling

-   Open `index.Rmd`
-   Modify the YAML header and section titles to match your content
-   Compile using the **Build** tab in RStudio

### Publishing Using GitHub Pages

-   Create a folder named `docs` and move compiled HTML files there
-   In GitHub repository settings, set **Pages** source to the `docs` folder
-   Your site will be available at `username.github.io/repository_name`

### Invite Collaborators

Navigate to your repository \> **Settings** \> **Manage Access** \> **Invite a collaborator**.

Enter the userâ€™s name or email, assign appropriate access permissions, and send the invitation.

### Useful Resources

-   [Manuscript template](https://github.com/ehsanx/manuscript-colab-tools-for-new-users) ([view output](https://ehsanx.github.io/manuscript-colab-tools-for-new-users/))
-   [UBC thesis template](https://github.com/jepa/ubcdown)
-   [GitHub Copilot in RStudio](https://docs.posit.co/ide/user/ide/guide/tools/copilot.html)
-   [Setup video](https://youtu.be/t7NrkAeosog?si=yfpp0VLzhYJGOf1-)
-   [Managing branches](https://www.youtube.com/watch?v=ofvvxRjGjzw)
-   [Conflict resolution in RStudio](https://www.youtube.com/watch?v=lgs54ENxPW8)
