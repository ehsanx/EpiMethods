## Confounding {.unnumbered}

```{r setup, cache = TRUE, warning=FALSE, message=FALSE}
# devtools::install_github('osofr/simcausal')
require(simcausal)
```

Big data: **What if we had 1,000,000 (one million) observations?** Would that give us true result? Let's try to answer that using Directed acyclic graphs (DAGs).

Let us consider

-   L is continuous variable
-   A is binary treatment
-   Y is continuous outcome

### Non-null effect

-   True treatment effect = 1.3

#### Data generating process

```{r dgm1, cache = TRUE, warning=FALSE, message=FALSE}
require(simcausal)
D <- DAG.empty()
D <- D + 
  node("L", distr = "rnorm", mean = 10, sd = 1) + 
  node("A", distr = "rbern", prob = plogis(-10 + 1.1*L)) +
  node("Y", distr = "rnorm", mean = 0.5 * L + 1.3 * A, sd = .1)
Dset <- set.DAG(D)
```

#### Generate DAG

```{r dag1, cache = TRUE, warning=FALSE}
plotDAG(Dset, xjitter = 0.1, yjitter = .9,
        edge_attrs = list(width = 0.5, arrow.width = 0.4, arrow.size = 0.7),
        vertex_attrs = list(size = 12, label.cex = 0.8))

```

#### Generate Data

```{r data, cache = FALSE, warning=FALSE, message=FALSE}
require(simcausal)
Obs.Data <- sim(DAG = Dset, n = 1000000, rndseed = 123)
head(Obs.Data)
```

#### Estimate effect

```{r est, cache = TRUE, warning=FALSE, message=FALSE}
# Not adjusted for L
fit0 <- glm(Y ~ A, family="gaussian", data=Obs.Data)
round(coef(fit0),2)

# Adjusted for L
fit <- glm(Y ~ A + L, family="gaussian", data=Obs.Data)
round(coef(fit),2)
```

### Null effect

-   True treatment effect = 0

#### Data generating process

```{r dgm2, cache = TRUE, warning=FALSE, message=FALSE}
require(simcausal)
D <- DAG.empty()
D <- D + 
  node("L", distr = "rnorm", mean = 10, sd = 1) + 
  node("A", distr = "rbern", prob = plogis(-10 + 1.1*L)) +
  node("Y", distr = "rnorm", mean = 0.5 * L, sd = .1)
Dset <- set.DAG(D)
```

#### Generate DAG

```{r dag2, cache = TRUE, warning=FALSE, message=FALSE}
plotDAG(Dset, xjitter = 0.1, yjitter = .9,
        edge_attrs = list(width = 0.5, arrow.width = 0.4, arrow.size = 0.7),
        vertex_attrs = list(size = 12, label.cex = 0.8))

```

#### Generate Data

```{r data2, cache = FALSE, warning=FALSE, message=FALSE}
require(simcausal)
Obs.Data <- sim(DAG = Dset, n = 1000000, rndseed = 123)
head(Obs.Data)
```

#### Estimate effect

```{r est2, cache = TRUE, warning=FALSE, message=FALSE}
# Not adjusted for L
fit0 <- glm(Y ~ A, family = "gaussian", data = Obs.Data)
round(coef(fit0),2)

# Adjusted for L
fit <- glm(Y ~ A + L, family = "gaussian", data = Obs.Data)
round(coef(fit),2)
```


### Video content (optional)

::: callout-tip
For those who prefer a video walkthrough, feel free to watch the video below, which offers a description of an earlier version of the above content.
:::

::: {style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"}
<iframe src="https://www.youtube.com/embed/EcX7ILtp9aQ" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen>

</iframe>
:::